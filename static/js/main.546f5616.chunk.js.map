{"version":3,"sources":["features/feature1-auth/Register/Register.module.css","features/feature1-auth/Login/Login.module.css","features/feature1-auth/Password-recovery/PasswordRecovery.module.css","main/ui/header/Header.module.css","main/ui/common/Modal/Modal.module.css","features/feature1-auth/Password-recovery/new-password/NewPassword.module.css","features/feature1-auth/Password-recovery/check-email/CheckEmail.module.css","features/feature1-auth/Profile/Profile.module.css","main/ui/common/c1-SuperInputText/SuperInputText.module.css","main/ui/common/c3-SuperCheckbox/SuperCheckbox.module.css","main/ui/common/c2-SuperButton/SuperButton.module.css","features/feature2-table/cards-table/list-card/ListCard.module.css","features/feature1-auth/Error404/Error404.tsx","main/ui/common/c1-SuperInputText/SuperInputText.tsx","main/ui/common/c2-SuperButton/SuperButton.tsx","main/dal/api-instance.ts","main/dal/auth-api.ts","features/feature1-auth/Login/login-reduser.ts","main/ui/common/c3-SuperCheckbox/SuperCheckbox.tsx","features/feature1-auth/Login/Login.tsx","main/ui/api/api.ts","main/ui/api/apiRecoveryPassword/apiRecoveryPassword.ts","features/feature1-auth/Password-recovery/password-recovery-reduser.ts","features/feature1-auth/Password-recovery/new-password/NewPassword.tsx","hooks/newPasswordHandler/newPasswordHandler.ts","features/feature1-auth/Password-recovery/PasswordRecovery.tsx","hooks/passwordRecoveryHandler/passwordRecoveryHandler.ts","main/ui/assets/img/icons/checkEmail.svg","features/feature1-auth/Password-recovery/check-email/CheckEmail.tsx","main/ui/header/Header.tsx","main/dal/cardPacks-api.ts","features/feature2-table/cards-table/cardsTable-reduser.ts","hooks/dateChanger/dateChanger.ts","main/ui/common/Modal/Modal.tsx","features/feature2-table/cards-table/CardsTable.tsx","features/feature1-auth/Profile/Profile.tsx","features/feature1-auth/Register/register-reduser.ts","features/feature1-auth/Register/Register.tsx","main/dal/listCard-api.ts","features/feature2-table/cards-table/list-card/listCard-reduser.ts","features/feature2-table/cards-table/list-card/ListCard.tsx","main/ui/routes/Routes.tsx","main/ui/App.tsx","reportWebVitals.ts","features/feature1-auth/Profile/profile-reduser.ts","main/bll/store.ts","index.tsx","features/feature2-table/cards-table/CardsTable.module.css"],"names":["module","exports","Error404","className","styles","error","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","spanClassName","inputStyle","formName","restProps","finalSpanClassName","s","finalInputClassName","errorInput","InputStyleClassName","inputWrapper","htmlFor","label","id","e","currentTarget","value","key","SuperButton","btn","color","btnClassName","onClick","classBtn","deleteBtn","updateBtn","confirmBtn","cancelBtn","bigDeleteBtn","filteMyBtn","filterAllBtn","filterMyBtnActive","filterAllBtnActive","instance","axios","create","baseURL","withCredentials","authApi","email","password","rememberMe","post","delete","AUTH_USER","DELETE_USER","CHANGE_REMEMBER_ME_STUSUS","EMPTY_STRING","initialState","userData","avatar","created","isAdmin","name","publicCardPacksCount","updated","verified","_id","authStatus","authUserRequest","errorAuthUser","logoutTC","dispatch","then","res","catch","console","log","SuperCheckbox","onChangeChecked","children","checkbox","checkboxWrapper","checked","Login","useDispatch","useSelector","state","login","useState","setEmail","setpassword","rememberMeStatus","setRememberMeStatus","emailError","passwordError","sendLoginRequest","data","loginTC","to","path","profile","loginWrapper","loginWindow","logo","signIn","emailWrapper","passwordWrapper","forgotPasswordBtn","passwordRecovery","loginBtn","signUpBtn","register","apiServices","apiRecoveryPassword","from","message","resetPasswordToken","isSending","newPassword","setNewPassword","setSending","sendInstructions","sendNewPassword","token","NewPassword","useParams","navigate","useNavigate","action","thunk","newPasswordError","setNewPasswordError","length","useNewPasswordHandler","newPasswordWindow","createNewPassword","newPasswordWrapper","title","createNewPasswordBtn","PasswordRecovery","setEmailError","test","usePasswordRecoveryHandler","checkEmail","passwordRecoveryWindow","forgotYourPassword","alert","sendInstructionsBtn","tryLoginBtn","CheckEmail","checkEmailWindow","checkEmailWrapper","checkEmailImg","src","alt","Header","header","headerWrapper","list","item","activeItem","packList","cardPacksApi","get","cardsPack","put","deckCover","GET_CARD_PACKS","SET_CARD_PACK","REMOVE_CARD_PACK","UPDATE_CARD_PACK","CHANGE_FILTER","CHANGE_SORTING","CHANGE_SORT_CONFIG","cardPacks","page","pageCount","cardPacksTotalCount","minCardsCount","maxCardsCount","tokenDeathTime","filteredBy","sortedBy","sortConfig","changeFiltering","changeSortConfig","getCardPacksTC","cardPacksData","setNewCardPackTC","newCardPack","newCardsPack","deleteCardPackTC","deletedPackId","deletedCardsPack","updateCardPackTC","updatedPack","updatedCardsPack","dateChanger","date","changedDate","Date","parse","checkingDate","d","day","getDay","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","Modal","active","setActive","index","modalWrapper","modalContent","event","stopPropagation","headerModalWrapper","modalTitle","closeBtn","CardsTable","cardsPacks","userId","activeModal","setActiveModal","modalDeleteCardPackBtnState","map","activeDeletePackModal","setActiveDeletePackModal","activeUpdatePackModal","setActiveUpdatePackModal","setName","useEffect","onSortedByBtnClick","changeSorting","cardPacksCopy","filter","pack","user_id","sort","a","b","handleChangesModal","items","sortBtnClass","ascending","descending","tableContainer","modalBtnsWrapper","addPacksFormWrapper","cardsCount","user_name","actions","reverse","elem","cardPackName","replace","Profile","mainWrapper","leftBar","leftBarTitle","filterBtnsWrapper","tableWrapper","registerAPI","isSignUp","infoError","Register","setPassword","confirmPassword","setConfirmPassword","okSignUp","errorInfo","sendDataHandler","setEmailPasswordRegister","emailPasswordError","response","infoSMSError","passwordRegExp","sendRegisterDataTC","disabledBtn","registerWrapper","registerWindow","signUp","buttons","registerBtn","disabled","listCardApi","cardsPack_id","question","grade","answer","card","answerImg","GET_CARDS","SET_NEW_CARD","REMOVE_CARD","UPDATE_CARD","CHANGE_CARD_SORTING","CHANGE_CARD_SORT_CONFIG","SET_CARD_PACK_ID","cardList","cards","cardsTotalCount","maxGrade","minGrade","packUserId","cardPackId","cardsSortedBy","cardsSortConfig","changeCardSortConfig","getCardListTC","cardListData","setNewCardTC","newCard","deleteCardTC","deletedCardId","deletedCard","updateCardTC","updatedCard","ListCard","cardsList","setQuestion","setAnswer","cardPackIdURL","changeCardSorting","cardCopy","listCardContainer","listCardWrapper","titleWrapper","back","packName","addCardHandler","onClickCardUpdate","Rout","element","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","p","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,gBAAkB,kCAAkC,eAAiB,iCAAiC,KAAO,uBAAuB,OAAS,yBAAyB,aAAe,+BAA+B,gBAAkB,kCAAkC,UAAY,4BAA4B,QAAU,0BAA0B,UAAY,4BAA4B,YAAc,gC,mBCA5ZD,EAAOC,QAAU,CAAC,aAAe,4BAA4B,YAAc,2BAA2B,KAAO,oBAAoB,OAAS,sBAAsB,aAAe,4BAA4B,gBAAkB,+BAA+B,kBAAoB,iCAAiC,SAAW,wBAAwB,UAAY,yBAAyB,cAAgB,+B,mBCAzYD,EAAOC,QAAU,CAAC,iBAAmB,2CAA2C,uBAAyB,iDAAiD,KAAO,+BAA+B,mBAAqB,6CAA6C,aAAe,uCAAuC,gBAAkB,0CAA0C,oBAAsB,8CAA8C,YAAc,sCAAsC,MAAQ,kC,mBCApfD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,cAAgB,8BAA8B,KAAO,qBAAqB,KAAO,qBAAqB,KAAO,qBAAqB,SAAW,yBAAyB,QAAU,wBAAwB,WAAa,6B,mBCAvQD,EAAOC,QAAU,CAAC,aAAe,4BAA4B,OAAS,sBAAsB,aAAe,4BAA4B,mBAAqB,kCAAkC,WAAa,0BAA0B,SAAW,0B,mBCAhPD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,kBAAoB,uCAAuC,KAAO,0BAA0B,kBAAoB,uCAAuC,mBAAqB,wCAAwC,qBAAuB,0CAA0C,MAAQ,6B,mBCA9VD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,iBAAmB,qCAAqC,KAAO,yBAAyB,kBAAoB,sCAAsC,cAAgB,kCAAkC,MAAQ,4B,mBCA1QD,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,YAAc,6BAA6B,QAAU,yBAAyB,aAAe,8BAA8B,kBAAoB,mCAAmC,aAAe,gC,mBCApQD,EAAOC,QAAU,CAAC,aAAe,qCAAqC,WAAa,mCAAmC,MAAQ,8BAA8B,MAAQ,8BAA8B,WAAa,qC,mBCA/MD,EAAOC,QAAU,CAAC,gBAAkB,uCAAuC,SAAW,gCAAgC,cAAgB,uC,iFCAtID,EAAOC,QAAU,CAAC,IAAM,yBAAyB,UAAY,+BAA+B,aAAe,kCAAkC,UAAY,+BAA+B,WAAa,gCAAgC,UAAY,+BAA+B,WAAa,gCAAgC,aAAe,kCAAkC,kBAAoB,uCAAuC,mBAAqB,0C,kBCA9bD,EAAOC,QAAU,CAAC,kBAAoB,oCAAoC,gBAAkB,kCAAkC,aAAe,+BAA+B,aAAe,+BAA+B,SAAW,2BAA2B,KAAO,uBAAuB,oBAAsB,sCAAsC,QAAU,0BAA0B,QAAU,0BAA0B,MAAQ,wBAAwB,IAAM,sBAAsB,UAAY,4BAA4B,WAAa,+B,yHCG5gB,SAASC,IACd,OACE,qBAAKC,UAAWC,IAAOC,MAAvB,oB,4DCyDWC,EA/C2C,SAAC,GAWrD,IATEC,EASH,EATGA,KACAC,EAQH,EARGA,SAAUC,EAQb,EARaA,aACVC,EAOH,EAPGA,WAAYC,EAOf,EAPeA,QACZN,EAMH,EANGA,MACAF,EAKH,EALGA,UAAWS,EAKd,EALcA,cAAeC,EAK7B,EAL6BA,WAC1BC,EAIH,EAJGA,SAEGC,EAEN,qIAeKC,EAAkB,UAAMC,IAAEZ,MAAR,YAAiBO,GAAgC,IACnEM,EAAmB,UAAMD,IAAEE,WAAR,YAAsBhB,GACzCiB,EAAsBP,EAAaI,IAAEJ,WAAa,GACxD,OACI,sBAAKV,UAAWc,IAAEI,aAAlB,UACKhB,EACK,uBAAOF,UAAWa,EAAoBM,QAASf,EAA/C,SAAsDF,IACtD,uBAAOF,UAAWc,IAAEM,MAAOD,QAASf,EAApC,SAA2CO,IAEjD,mCACIU,GAAIjB,EACJA,KAAMA,EACNC,SA1Ba,SAACiB,GACtBjB,GACGA,EAASiB,GAEZhB,GAAgBA,EAAagB,EAAEC,cAAcC,QAuBrCjB,WArBe,SAACe,GACxBf,GAAcA,EAAWe,GAEzBd,GACa,UAAVc,EAAEG,KACFjB,KAiBKR,UAAS,UAAKe,EAAL,YAA4BE,IACjCL,Q,gBCWLc,EAzDqC,SAAC,GAOhD,EALG1B,UAKH,EALc2B,IAKd,EAJGC,MAIF,IAMEC,EATAC,EAGH,EAHGA,QAASC,EAGZ,EAHYA,SACNnB,EAEN,gEAyCD,MAlCiB,QAAbmB,IACAF,EAAef,IAAEa,KAEJ,cAAbI,IACAF,EAAY,UAAMf,IAAEa,IAAR,YAAeb,IAAEkB,YAEhB,cAAbD,IACAF,EAAY,UAAMf,IAAEa,IAAR,YAAeb,IAAEmB,YAEhB,eAAbF,IACAF,EAAY,UAAMf,IAAEa,IAAR,YAAeb,IAAEoB,aAEhB,cAAbH,IACAF,EAAY,UAAMf,IAAEa,IAAR,YAAeb,IAAEqB,YAEhB,cAAbJ,IACAF,EAAY,UAAMf,IAAEa,IAAR,YAAeb,IAAEkB,YAEhB,iBAAbD,IACAF,EAAY,UAAMf,IAAEa,IAAR,YAAeb,IAAEsB,eAEhB,eAAbL,IACAF,EAAY,UAAMf,IAAEa,IAAR,YAAeb,IAAEuB,aAEhB,iBAAbN,IACAF,EAAY,UAAMf,IAAEa,IAAR,YAAeb,IAAEwB,eAEhB,sBAAbP,IACAF,EAAY,UAAMf,IAAEa,IAAR,YAAeb,IAAEyB,oBAEhB,uBAAbR,IACAF,EAAY,UAAMf,IAAEa,IAAR,YAAeb,IAAE0B,qBAI7B,oCACIV,QAzCgB,SAACR,GACrBQ,GAAWA,EAAQR,IAyCftB,UAAW6B,GACPjB,K,iBC7DH6B,EAAWC,IAAMC,OAAO,CACjCC,QAAS,sCACTC,iBAAiB,ICDRC,EAAU,SACTC,EAAeC,EAAkBC,GACvC,OAAOR,EAASS,KAA4C,aAAc,CAACH,QAAOC,WAAUC,gBAFvFH,EAAU,WAKf,OAAOL,EAASS,KAA4C,YALvDJ,EAAU,WAQf,OAAOL,EAASU,OAA8C,YCRhEC,EAAY,kBAEZC,EAAc,oBAEdC,EAA4B,kCAErBC,EAAe,GAQtBC,EAAoD,CACtDC,SAAU,CACNC,OAAQH,EACRI,QAASJ,EACTR,MAAOQ,EACPK,SAAS,EACTC,KAAMN,EACNO,qBAdY,EAeZb,YAAY,EACZc,QAASR,EACTS,UAAU,EACVC,IAAKV,EACLrD,MAAOqD,GAEXW,YAAY,GAoCHC,EAAkB,SAACV,GAAD,MAAkC,CAACrD,KAAMgD,EAAWK,aAEtEW,EAAgB,SAAClE,GAAD,MAAgC,CAACE,KA/D3C,mBA+D6DF,UAgBnEmE,EAAW,kBAAM,SAACC,GAC3BxB,IACKyB,MAAK,SAAAC,GACFF,EApB4B,CAAClE,KAAMiD,OAsBtCoB,OAAM,SAAAvE,GACHwE,QAAQC,IAAIzE,Q,+BCjDT0E,EA/ByC,SAAC,GASpD,EAPGxE,KAOF,IANEC,EAMH,EANGA,SAAUwE,EAMb,EANaA,gBACV7E,EAKH,EALGA,UACA8E,GAIH,EALcrE,cAKd,EAJGqE,UAEGlE,EAEN,4FAMKG,EAAmB,UAAMD,IAAEiE,SAAR,YAAoB/E,GAAwB,IAErE,OACI,wBAAOA,UAAWc,IAAEkE,gBAApB,UACKF,GAAY,sBAAM9E,UAAWc,IAAEL,cAAnB,SAAmCqE,IAChD,mCACI1E,KAAM,WACNC,SAZa,SAACiB,GACtBjB,GAAYA,EAASiB,GACrBuD,GAAmBA,EAAgBvD,EAAEC,cAAc0D,UAW3CjF,UAAWe,GAEPH,QCxBb,SAASsE,IACZ,IAAMZ,EAAWa,cACXjF,EAAQkF,aAAkD,SAAAC,GAAK,OAAIA,EAAMC,MAAM7B,SAASvD,SACxFgE,EAAakB,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,MAAMpB,cAH3D,EAKMqB,mBAAiBhC,GALvB,mBAKbR,EALa,KAKNyC,EALM,OAMYD,mBAAiBhC,GAN7B,mBAMbP,EANa,KAMHyC,EANG,OAO4BF,oBAAkB,GAP9C,mBAObG,EAPa,KAOKC,EAPL,KAQdC,EAAa7C,EAAQQ,EAAe,cACpCsC,EAAgB7C,EAAWO,EAAe,iBAE1CuC,EAAmB,SAAC/C,EAAeC,EAAkB0C,GACvDpB,EFmDe,SAACvB,EAAeC,EAAkB0C,GAAlC,OAAgE,SAACpB,GACpFxB,EAAkBC,EAAOC,EAAU0C,GAC9BnB,MAAK,SAAAC,GACFF,EAASH,EAAgBK,EAAIuB,UAEhCtB,OAAM,SAAAvE,GACHoE,EAASF,EAAclE,EAAMA,YEzDxB8F,CAAQjD,EAAOC,EAAU0C,KAGtC,OAAIxB,EACO,cAAC,IAAD,CAAU+B,GAAIC,GAAKC,UAGtB,qBAAKnG,UAAU,YAAf,SACI,qBAAKA,UAAWC,IAAOmG,aAAvB,SACI,sBAAKpG,UAAWC,IAAOoG,YAAvB,UACI,oBAAIrG,UAAWC,IAAOqG,KAAtB,0BACCpG,EACK,oBAAIF,UAAWC,IAAOsG,OAAtB,SAA+BrG,IAC/B,oBAAIF,UAAWC,IAAOsG,OAAtB,qBAEN,qBAAKvG,UAAWC,IAAOuG,aAAvB,SACI,cAAC,EAAD,CACI7F,SAAU,QACVP,KAAM,QACNoB,MAAOuB,EACPzC,aAAckF,EACdtF,MAAO0F,EACPlF,YAAU,MAGlB,qBAAKV,UAAWC,IAAOwG,gBAAvB,SACI,cAAC,EAAD,CACIzG,UAAWC,IAAO+C,SAClBrC,SAAU,WACVP,KAAM,WACNoB,MAAOwB,EACP1C,aAAcmF,EACdvF,MAAO2F,EACPnF,YAAU,MAGlB,sBAAKV,UAAWC,IAAOyG,kBAAvB,UACI,cAAC,EAAD,CACI5B,SAAU,cACVG,QAASS,EACTb,gBAAiBc,IACrB,cAAC,IAAD,CAAMM,GAAIC,GAAKS,iBAAf,SACI,cAAC,EAAD,CACI5E,SAAU,MADd,kCAMR,qBAAK/B,UAAWC,IAAO2G,SAAvB,SACI,cAAC,EAAD,CACI7E,SAAU,aACVD,QAAS,kBAAMgE,EAAiB/C,EAAOC,EAAU0C,IAFrD,qBAMJ,+DACA,qBAAK1F,UAAWC,IAAO4G,UAAvB,SACI,cAAC,IAAD,CAAMZ,GAAIC,GAAKY,SAAf,SACI,cAAC,EAAD,CACI/E,SAAU,MADd,gC,qBChFnBgF,EAAcrE,IAAMC,OAAO,CACpCC,QAAQ,wCCDCoE,EAAsB,SACfjE,GACZ,OAAOgE,EAAY7D,KAAZ,cAAgC,CACnCH,QAAOkE,KAAM,kCACbC,QAAQ,+PAJPF,EAAsB,SAOfG,EAA4BnE,GACxC,OAAO+D,EAAY7D,KAAZ,wBACH,CAACiE,qBAAoBnE,cCR3BQ,EAAe,CACjBT,MAAO,GACPqE,WAAW,EACXC,YAAa,IAmBJ7B,EAAW,SAACzC,GAAD,MAAoB,CACxC3C,KAAM,0BACN2C,UAESuE,EAAiB,SAACD,GAAD,MAA0B,CACpDjH,KAAM,iCACNiH,gBAESE,EAAa,SAACH,GAAD,MAAyB,CAC/ChH,KAAM,+BACNgH,cAGSI,EAAmB,SAACzE,GAC7B,OAAO,SAACuB,GACJ0C,EAAoCjE,GAAOwB,OAC3CD,EAASiD,GAAW,MAGfE,EAAkB,SAACC,EAAe1E,GAC3C,OAAO,SAACsB,GACJ0C,EAAoCU,EAAO1E,GAAUuB,OACrDD,EAASiD,GAAW,MCnCrB,SAASI,KACZ,IAAMN,EAAcjC,aAAY,SAACC,GAAD,OAA6BA,EAAMsB,iBAAiBU,eAC9ED,EAAYhC,aAAY,SAACC,GAAD,OAA6BA,EAAMsB,iBAAiBS,aAC3EM,EAASE,cAATF,MACHG,EAAWC,cAJW,ECDO,SAAC,GAKkC,IAJ9BC,EAI6B,EAJ7BA,OACAC,EAG6B,EAH7BA,MACAX,EAE6B,EAF7BA,YACAK,EAC6B,EAD7BA,MAC6B,EACnBnC,mBAAiB,IADE,mBAC5D0C,EAD4D,KAC1CC,EAD0C,KAE7D5D,EAAWa,cAcjB,MAAO,CAAC9E,SAZS,SAACgH,GACda,EAAoB,IACpB5D,EAASyD,EAAOV,KAUFvF,QARF,WACPuF,EAEMA,EAAYc,OAAS,GAC5BD,EAAoB,uIAFpBA,EAAoB,mFAIxB5D,EAAS0D,EAAMN,EAAOL,KAECY,oBDXvBG,CAAsB,CACtBL,OAAQT,EACRU,MAAOP,EACPJ,cACAK,UAPArH,EANsB,EAMtBA,SACAyB,EAPsB,EAOtBA,QACAmG,EARsB,EAQtBA,iBAWJ,OAJIb,GACAS,EAAS,GAAD,OAAI3B,GAAKZ,QAIjB,qBAAKtF,UAAU,YAAf,SACI,qBAAKA,UAAWC,IAAOoH,YAAvB,SACI,sBAAKrH,UAAWC,IAAOoI,kBAAvB,UACI,oBAAIrI,UAAWC,IAAOqG,KAAtB,0BACA,oBAAItG,UAAWC,IAAOqI,kBAAtB,iCACA,qBAAKtI,UAAWC,IAAOsI,mBAAvB,SACI,cAAC,EAAD,CACI5H,SAAU,WACVP,KAAM,WACNoB,MAAO6F,EACP/G,aAAcD,EACdG,QAASsB,EACT5B,MAAO+H,EACPvH,YAAU,MAGlB,sBAAMV,UAAWC,IAAOuI,MAAxB,oFACA,qBAAKxI,UAAWC,IAAOwI,qBAAvB,SACI,cAAC,EAAD,CACI1G,SAAU,aACVD,QAASA,EAFb,0C,wBEtCjB,SAAS4G,KACZ,IAAM3F,EAAQqC,aAAY,SAACC,GAAD,OAA6BA,EAAMsB,iBAAiB5D,SACxEqE,EAAYhC,aAAY,SAACC,GAAD,OAA6BA,EAAMsB,iBAAiBS,aAC9ES,EAAWC,cAHgB,ECDO,SAAC,GAIuC,IAHnCC,EAGkC,EAHlCA,OACAC,EAEkC,EAFlCA,MACAjF,EACkC,EADlCA,MACkC,EACzCwC,mBAAiB,IADwB,mBACtEK,EADsE,KAC1D+C,EAD0D,KAEvErE,EAAWa,cAcjB,MAAO,CAAC9E,SAZS,SAAC0C,GACd4F,EAAc,IACdrE,EAASyD,EAAOhF,KAUFjB,QARF,WACPiB,EAEO,4CAA4C6F,KAAK7F,IACzD4F,EAAc,2GAFdA,EAAc,6EAIlBrE,EAAS0D,EAAMjF,KAEQ6C,cDXvBiD,CAA2B,CAACd,OAAQvC,EAAUwC,MAAOR,EAAkBzE,UAHvE1C,EAL2B,EAK3BA,SACAyB,EAN2B,EAM3BA,QACA8D,EAP2B,EAO3BA,WAGAwB,GACAS,EAAS,GAAD,OAAI3B,GAAK4C,aAUrB,OACI,qBAAK9I,UAAU,YAAf,SACI,qBAAKA,UAAWC,KAAO0G,iBAAvB,SACI,sBAAK3G,UAAWC,KAAO8I,uBAAvB,UACI,oBAAI/I,UAAWC,KAAOqG,KAAtB,0BACA,oBAAItG,UAAWC,KAAO+I,mBAAtB,oCACA,qBAAKhJ,UAAWC,KAAOuG,aAAvB,SACI,cAAC,EAAD,CACI7F,SAAU,QACVP,KAAM,QACNoB,MAAOuB,EACPzC,aAAcD,EACdG,QApBN,WACVoF,EACAqD,MAAM,mFAENA,MAAMlG,IAiBU7C,MAAO0F,EACPlF,YAAU,MAGlB,sBAAMV,UAAWC,KAAOuI,MAAxB,iFACA,qBAAKxI,UAAWC,KAAOiJ,oBAAvB,SACI,cAAC,EAAD,CACInH,SAAU,aACVD,QAASA,EAFb,iCAMJ,sBAAM9B,UAAWC,KAAOuI,MAAxB,6CACA,qBAAKxI,UAAWC,KAAOkJ,YAAvB,SACI,cAAC,IAAD,CAAMlD,GAAIC,GAAKZ,MAAf,SACI,cAAC,EAAD,CACIvD,SAAU,MADd,uC,wBE7Db,OAA0B,uCCO5BqH,GAAa,WACtB,IAAMrG,EAAQqC,aAAY,SAACC,GAAD,OAA6BA,EAAMsB,iBAAiB5D,SAE9E,OACI,qBAAK/C,UAAU,YAAf,SACI,qBAAKA,UAAWC,KAAO6I,WAAvB,SACI,sBAAK9I,UAAWC,KAAOoJ,iBAAvB,UACI,oBAAIrJ,UAAWC,KAAOqG,KAAtB,0BACA,sBAAKtG,UAAWC,KAAOqJ,kBAAvB,UACI,qBAAKtJ,UAAWC,KAAOsJ,cAAvB,SACI,qBAAKC,IAAKV,GAAYW,IAAK,iBAE/B,gDAEJ,uBAAMzJ,UAAWC,KAAOuI,MAAxB,4DAA0EzF,a,wCCfvF,SAAS2G,KACZ,OACI,qBAAK1J,UAAWC,KAAO0J,OAAvB,SACI,qBAAK3J,UAAU,YAAf,SACI,sBAAKA,UAAWC,KAAO2J,cAAvB,UACI,cAAC,IAAD,CAAS3D,GAAIC,GAAKZ,MAAlB,SACI,oBAAItF,UAAWC,KAAOqG,KAAtB,4BAEJ,qBAAItG,UAAWC,KAAO4J,KAAtB,UACI,oBAAI7J,UAAS,UAAKC,KAAO6J,KAAZ,YAAoB7J,KAAO8J,YAAxC,SACI,cAAC,IAAD,CAAS/J,UAAWC,KAAO+J,SAAU/D,GAAIC,GAAKC,QAA9C,yBAEJ,oBAAInG,UAAWC,KAAO6J,KAAtB,SACI,cAAC,IAAD,CAAS9J,UAAWC,KAAOkG,QAASF,GAAIC,GAAKC,QAA7C,iC,gCCdf8D,GAAe,WAEpB,OAAOxH,EAASyH,IAAmD,yDAF9DD,GAAe,SAITpG,GACX,OAAOpB,EAASS,KAA8B,cAAe,CAACiH,UAAW,CAACtG,WALrEoG,GAAe,SAOT5I,GACX,OAAOoB,EAASU,OAAT,yBAA2D9B,KAR7D4I,GAAe,SAUT5I,EAAYwC,GACvB,OAAOpB,EAAS2H,IAAT,cAAqD,CACxDD,UAAW,CACPlG,IAAK5C,EACLwC,OACAwG,UAAW,OCjBrBC,GAAiB,kBACjBC,GAAgB,sBAChBC,GAAmB,yBACnBC,GAAmB,yBACnBC,GAAgB,sBAChBC,GAAiB,uBACjBC,GAAqB,2BAuCrBpH,GAA0C,CAC5CqH,UAAW,GACXC,KAAM,EACNC,UAAW,EACXC,oBAAqB,EACrBC,cAAe,EACfC,cAAe,EACfxD,MAAO,GACPyD,eAAgB,EAChBC,WAAY,MACZC,SAAU,KACVC,WAAY,aAoDHC,GAAkB,SAACH,GAAD,MAAgC,CAAChL,KAAMsK,GAAeU,eAExEI,GAAmB,SAACF,GAAD,MAAiC,CAAClL,KAAMwK,GAAoBU,eAE/EG,GAAiB,kBAAM,SAACnH,GACjC2F,KACK1F,MAAK,SAAAC,GAbsB,IAACkH,EAczBpH,GAdyBoH,EAcKlH,EAAIuB,KAdqC,CAC/E3F,KAAMkK,GACNoB,sBAcKjH,OAAM,SAAAvE,GACCwE,QAAQC,IAAIzE,QAKfyL,GAAmB,SAAC9H,GAAD,OAAkB,SAACS,GAC/C2F,GAA4BpG,GACvBU,MAAK,SAAAC,GApBgB,IAACoH,EAqBnBtH,GArBmBsH,EAqBKpH,EAAIuB,KAAK8F,aArBQ,CAACzL,KAAMmK,GAAeqB,oBAuBlEnH,OAAM,SAAAvE,GACCwE,QAAQC,IAAIzE,QAKf4L,GAAmB,SAACzK,GAAD,OAAgB,SAACiD,GAC7C2F,GAA4B5I,GACvBkD,MAAK,SAAAC,GA9BmB,IAACuH,EA+BtBzH,GA/BsByH,EA+BKvH,EAAIuB,KAAKiG,iBAAiB/H,IA/BJ,CAAC7D,KAAMoK,GAAkBuB,sBAiC7EtH,OAAM,SAAAvE,GACCwE,QAAQC,IAAIzE,QAKf+L,GAAmB,SAAC5K,EAAYwC,GAAb,OAA8B,SAACS,GAC3D2F,GAA4B5I,EAAIwC,GAC3BU,MAAK,SAAAC,GAxCgB,IAAC0H,EAyCnB5H,GAzCmB4H,EAyCK1H,EAAIuB,KAAKoG,iBAzCQ,CAAC/L,KAAMqK,GAAkByB,oBA2CrEzH,OAAM,SAAAvE,GACCwE,QAAQC,IAAIzE,QC1JfkM,GAAc,SAACC,GACxB,IAAIC,EAAc,IAAIC,KAAKA,KAAKC,MAAMH,IAChCI,EAAe,SAACC,GAClB,OAAOA,GAAK,GAAKA,EAAV,WAAkBA,IAEzBC,EAAMF,EAAaH,EAAYM,UAC/BC,EAAQJ,EAAaH,EAAYQ,YACjCC,EAAON,EAAaH,EAAYU,eAChCC,EAAQR,EAAaH,EAAYY,YACjCC,EAAUV,EAAaH,EAAYc,cACvC,MAAM,GAAN,OAAUT,EAAV,YAAiBE,EAAjB,YAA0BE,EAA1B,eAAqCE,EAArC,YAA8CE,I,oBCGrCE,GAAuB,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,OAAQC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,MAAOhF,EAAqB,EAArBA,MAAO1D,EAAc,EAAdA,SAEnE,OACI,qBACI9E,UAAWsN,EAAOE,GAAP,UAAmBvN,KAAOwN,aAA1B,YAA0CxN,KAAOqN,QAAWrN,KAAOwN,aAC9E3L,QAAS,kBAAMyL,EAAU,EAAC,KAF9B,SAGI,sBACIvN,UAAWsN,EAAOE,GAAP,UAAmBvN,KAAOyN,aAA1B,YAA0CzN,KAAOqN,QAAWrN,KAAOyN,aAC9E5L,QAAS,SAAA6L,GAAK,OAAIA,EAAMC,mBAF5B,UAGI,sBAAK5N,UAAWC,KAAO4N,mBAAvB,UACI,oBAAI7N,UAAWC,KAAO6N,WAAtB,SAAmCtF,IACnC,cAAC,EAAD,CACIzG,SAAU,MACVD,QAAS,kBAAMyL,EAAU,EAAC,KAF9B,SAGI,sBAAMvN,UAAWC,KAAO8N,SAAxB,uBAGPjJ,QCNV,SAASkJ,KACZ,IAAM1J,EAAWa,cACX0C,EAAWC,cACXmG,EAAa7I,aAA8C,SAAAC,GAAK,OAAIA,EAAM4I,WAAWpD,aACrFqD,EAAS9I,aAAsC,SAAAC,GAAK,OAAIA,EAAMC,MAAM7B,SAASQ,OAC7EmH,EAAahG,aAA6C,SAAAC,GAAK,OAAIA,EAAM4I,WAAW7C,cACpFE,EAAalG,aAA8C,SAAAC,GAAK,OAAIA,EAAM4I,WAAW3C,cACrFD,EAAWjG,aAA2C,SAAAC,GAAK,OAAIA,EAAM4I,WAAW5C,YAP7D,EASa9F,mBAAyB,EAAC,IATvC,mBASlB4I,EATkB,KASLC,EATK,KAUnBC,EAA8BJ,EAAWK,KAAI,kBAAM,KAVhC,EAWiC/I,mBAAyB8I,GAX1D,mBAWlBE,EAXkB,KAWKC,EAXL,OAYiCjJ,mBAAyB8I,GAZ1D,mBAYlBI,EAZkB,KAYKC,EAZL,OAaDnJ,mBAAiBhC,GAbhB,mBAalBM,EAbkB,KAaZ8K,EAbY,OAcCpJ,mBAAwB,MAdzB,mBAclBrF,EAdkB,UAgBzB0O,qBAAU,WACNtK,EAASmH,QACV,IAEH,IAsBMoD,EAAqB,SAACxD,GACL,eAAfC,GACAhH,EAASkH,GAAiB,cAEX,cAAfF,GACAhH,EAASkH,GAAiB,eAE9BlH,EHuCqB,SAAC+G,GAAD,MAA4B,CAACjL,KAAMuK,GAAgBU,YGvC/DyD,CAAczD,KAGvB0D,EAAgBd,EAED,OAAf7C,IACA2D,EAAgBA,EAAcC,QAAO,SAAAC,GAAI,MAAmB,OAAf7D,GAAuB6D,EAAKC,UAAYhB,MAGxE,OAAb7C,GACA0D,EAAcI,MAAK,SAACC,EAAGC,GACnB,OAAID,EAAE/D,GAAYgE,EAAEhE,GACM,cAAfC,GAA8B,EAAI,EAEzC8D,EAAE/D,GAAYgE,EAAEhE,GACM,cAAfC,EAA6B,GAAK,EAEtC,KAKf,IAAMgE,EAAqB,SAAC9B,EAAeD,GACvC,IAAIgC,EAAK,aAAOlB,GACLkB,EAAM/B,GAEjB+B,EAAM/B,GADC,KAEPD,EAAUgC,IAGVC,EAA8B,cAAflE,EAAA,UAAgCrL,KAAO0B,IAAvC,YAA8C1B,KAAOwP,WAArD,UAAsExP,KAAO0B,IAA7E,YAAoF1B,KAAOyP,YAE9G,OACI,sBAAK1P,UAAWC,KAAO0P,eAAvB,UACI,eAAC,GAAD,CAAOnC,MAAO,EAAGhF,MAAO,eAAgB8E,OAAQa,EAAaZ,UAAWa,EAAxE,UACI,cAAC,EAAD,CACIzN,SAAUT,GAAgB,eAC1BE,KAAM,QACNE,aAAcqO,EACdjO,YAAU,IAEd,sBAAKV,UAAWC,KAAO2P,iBAAvB,UACI,cAAC,EAAD,CACI7N,SAAU,YACVD,QAAS,kBAAMsM,EAAe,EAAC,KAFnC,oBAKA,cAAC,EAAD,CACIrM,SAAU,aACVD,QA9EG,WACnBwC,EAASqH,GAAiB9H,IAC1BuK,EAAe,EAAC,KA0EJ,wBAOR,kDACA,qBAAKpO,UAAWC,KAAO4P,oBAAvB,SACI,cAAC,EAAD,CACI9N,SAAU,aACVD,QAAS,kBAAMsM,EAAe,EAAC,KAFnC,4BAMJ,kCACI,gCACA,+BACI,oBAAIpO,UAAWC,KAAO4D,KAAtB,SACI,wBAAQ7D,UAAwB,SAAbqL,EAAsBmE,EAAevP,KAAO0B,IACvDG,QAAS,kBAAM+M,EAAmB,SAD1C,yBAKJ,oBAAI7O,UAAWC,KAAO6P,WAAtB,SACI,wBAAQ9P,UAAwB,eAAbqL,EAA4BmE,EAAevP,KAAO0B,IAC7DG,QAAS,kBAAM+M,EAAmB,eAD1C,qBAKJ,oBAAI7O,UAAWC,KAAO8D,QAAtB,SACI,wBAAQ/D,UAAwB,YAAbqL,EAAyBmE,EAAevP,KAAO0B,IAC1DG,QAAS,kBAAM+M,EAAmB,YAD1C,4BAKJ,oBAAI7O,UAAWC,KAAO8P,UAAtB,SACI,wBAAQ/P,UAAwB,cAAbqL,EAA2BmE,EAAevP,KAAO0B,IAC5DG,QAAS,kBAAM+M,EAAmB,cAD1C,0BAKJ,oBAAI7O,UAAWC,KAAO+P,QAAtB,0BAGJ,gCACCjB,EAAckB,UAAU3B,KAAI,SAAC4B,EAAoB1C,GAArB,OACzB,+BACI,6BAAK0C,EAAKrM,OACV,6BAAKqM,EAAKJ,aACV,6BAAK1D,GAAY8D,EAAKnM,WACtB,6BAAKmM,EAAKH,YACV,+BACI,cAAC,EAAD,CACIhO,SAAU,YACVD,QAAS,kBAlHXmC,EAkHkCiM,EAAKjM,IAlH1BkM,EAkH+BD,EAAKrM,KAjHhEgE,EAAS,eAAD,OAAgB5D,EAAhB,YAAuBkM,GAAgB,CAACC,SAAS,IAD3C,IAACnM,EAAakM,GAgHf,mBAKCD,EAAKhB,UAAYhB,EACZ,qCACE,cAAC,EAAD,CACInM,SAAU,YACVD,QAAS,kBAAMwN,EAAmB9B,EAAOkB,IAF7C,oBAKA,eAAC,GAAD,CACIlB,MAAOA,EACPhF,MAAO,cACP8E,OAAQmB,EACRlB,UAAWmB,EAJf,UAMI,cAAC,EAAD,CACI/N,SAAU,eACVP,KAAM,OACNE,aAAcqO,EACdjO,YAAU,IAEd,sBAAKV,UAAWC,KAAO2P,iBAAvB,UACI,cAAC,EAAD,CACI7N,SAAU,YACVD,QAAS,kBAAM4M,EAAyBL,IAF5C,oBAKA,cAAC,EAAD,CACItM,SAAU,aACVD,QAAS,kBAtJtBT,EAsJkD6O,EAAKjM,IArJlFK,EAAS2H,GAAiB5K,EAAIwC,IAC9B6K,EAAyBL,QACzBM,EAAQ,IAHkB,IAACtN,GAoJS,wBAQR,cAAC,EAAD,CACIU,SAAU,YACVD,QAAS,kBAAMwN,EAAmB9B,EAAOgB,IAF7C,oBAKA,eAAC,GAAD,CAAOhB,MAAOA,EAAOhF,MAAO,cAAe8E,OAAQiB,EAC5ChB,UAAWiB,EADlB,UAEI,8DAAgC,8BAAI0B,EAAKrM,KAAT,mBAAhC,mDAEA,sBAAK7D,UAAWC,KAAO2P,iBAAvB,UACI,cAAC,EAAD,CACI7N,SAAU,YACVD,QAAS,kBAAM0M,EAAyBH,IAF5C,oBAKA,cAAC,EAAD,CACItM,SAAU,eACVD,QAAS,kBAlLtBT,EAkLkD6O,EAAKjM,IAjLlFK,EAASwH,GAAiBzK,SAC1BmN,EAAyBH,GAFC,IAAChN,GAgLS,6BAQV,6BAnEd,cAAgB6O,EAAKjM,iBCzJlC,SAASoM,KACZ,IAAM/L,EAAWa,cACXjB,EAAakB,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,MAAMpB,cACzEkH,EAAahG,aAA6C,SAAAC,GAAK,OAAIA,EAAM4I,WAAW7C,cAE1FwD,qBAAU,WACD1K,GACDI,GlB0EoB,SAACA,GAC7BxB,IACKyB,MAAK,SAAAC,GACFF,EAASH,EAAgB,eAAIK,EAAIuB,WAEpCtB,OAAM,SAAAvE,GACHoE,EAASF,EAAclE,EAAMA,gBkB9ElC,IAcH,OAAKgE,EAIG,qCACI,cAACwF,GAAD,IACA,qBAAK1J,UAAWC,KAAO0P,eAAvB,SACI,sBAAK3P,UAAWC,KAAOqQ,YAAvB,UACI,sBAAKtQ,UAAWC,KAAOsQ,QAAvB,UACI,oBAAIvQ,UAAWC,KAAOuQ,aAAtB,8BACA,sBAAKxQ,UAAWC,KAAOwQ,kBAAvB,UACI,cAAC,EAAD,CACI1O,SAAyB,OAAfqJ,EAAsB,oBAAsB,aACtDtJ,QArBX,WACjBwC,EAASiH,GAAgB,QAkBD,gBAKA,cAAC,EAAD,CACIxJ,SAAyB,QAAfqJ,EAAuB,qBAAuB,eACxDtJ,QAtBV,WAClBwC,EAASiH,GAAgB,SAmBD,oBAMJ,cAAC,EAAD,CACIxJ,SAAU,YACVD,QAAS,WAnCjCwC,EAASD,MAiCW,uBAMJ,sBAAKrE,UAAWC,KAAOyQ,aAAvB,uBAEI,cAAC1C,GAAD,eA7Bb,cAAC,IAAD,CAAU/H,GAAIC,GAAKZ,Q,wBCjC5B7C,GAAWC,IAAMC,OAAO,CAC1BC,QAAS,wCAGA+N,GAAc,SACV5N,EAAeC,GACxB,OAAOP,GAASS,KAAT,gBAAsD,CAACH,QAAOC,cAIvEQ,GAAe,CACjBT,MAAO,GACPC,SAAU,GACV4N,UAAU,EACV1Q,MAAO,GACP2Q,UAAW,ICTR,SAASC,KAAY,IAAD,EACGvL,mBAAiB,IADpB,mBAChBxC,EADgB,KACTyC,EADS,OAESD,mBAAiB,IAF1B,mBAEhBvC,EAFgB,KAEN+N,EAFM,OAGuBxL,mBAAiB,IAHxC,mBAGhByL,EAHgB,KAGCC,EAHD,KASjB3M,EAAWa,cACX0C,EAAWC,cAEXoJ,EAAW9L,aAAuC,SAACC,GAAD,OAAWA,EAAMyB,SAAS8J,YAC5E1Q,EAAQkF,aAAsC,SAACC,GAAD,OAAWA,EAAMyB,SAAS5G,SACxEiR,EAAY/L,aAAsC,SAACC,GAAD,OAAWA,EAAMyB,SAAS+J,aAM5EO,EAAkB,WAChBpO,IAAagO,EACb/H,MAAM,0MAEN3E,EDgCsB,SAACvB,EAAeC,GAC9C,OAAO,SAACsB,GACJqM,GAAyB5N,EAAOC,GAC3BuB,MAAK,SAACC,GACHE,QAAQC,IAAR,eAAgBH,IAChBF,EA9BwB,SAACvB,EAAeC,GACpD,MAAO,CACH5C,KAAM,8BACN2C,QACAC,YA0BiBqO,CAAyBtO,EAAOC,IACzCsB,EAtBL,CACHlE,KAAM,wBACNwQ,UAoB2B,OAEtBnM,OAAM,SAACnD,GACJoD,QAAQC,IAAR,eAAgBrD,IAChB,IAAMgQ,EAAqBhQ,EAAEiQ,SAASxL,KAAK7F,MACrCsR,EAAelQ,EAAEiQ,SAASxL,KAAK0L,eACrCnN,EApBL,CACHlE,KAAM,qBACNF,MAkB0BoR,EAjB1BT,UAiB8CW,IACtC9M,QAAQC,IAAI2M,GACZ5M,QAAQC,IAAI6M,OC9CPE,CAAmB3O,EAAOC,KAKrC2O,EAAgC,MADhB3O,GAAYgO,GAOlC,OAJIE,GACArJ,EAAS,GAAD,OAAI3B,GAAKZ,QAIjB,qBAAKtF,UAAU,YAAf,SACI,qBAAKA,UAAWC,KAAO2R,gBAAvB,SACI,sBAAK5R,UAAWC,KAAO4R,eAAvB,UACI,oBAAI7R,UAAWC,KAAOqG,KAAtB,0BACA,oBAAItG,UAAWC,KAAO6R,OAAtB,qBACA,qBAAK9R,UAAWC,KAAOuG,aAAvB,SACI,cAAC,EAAD,CACI7F,SAAU,QACVP,KAAM,QACNoB,MAAOuB,EACPzC,aAAckF,EACdtF,MAAOA,EACPQ,YAAU,MAIlB,qBAAKV,UAAWC,KAAOwG,gBAAvB,SACI,cAAC,EAAD,CACIzG,UAAWC,KAAO+C,SAClBrC,SAAU,WACVP,KAAM,WACNoB,MAAOwB,EACP1C,aAAcyQ,EACdvQ,QA3CA,WACpByI,MAAM,8GA2Cc/I,MAAOiR,EACPzQ,YAAU,MAIlB,qBAAKV,UAAWC,KAAOwG,gBAAvB,SACI,cAAC,EAAD,CACIzG,UAAWC,KAAO+C,SAClBrC,SAAU,mBACVP,KAAM,WACNoB,MAAOwP,EACP1Q,aAAc2Q,EACdzQ,QAAS4Q,EACTlR,MAAOiR,EACPzQ,YAAU,MAGlB,sBAAKV,UAAWC,KAAO8R,QAAvB,UACI,qBAAK/R,UAAWC,KAAOkC,UAAvB,SACI,cAAC,IAAD,CAAM8D,GAAIC,GAAKZ,MAAf,SACI,cAAC,EAAD,CACIvD,SAAU,YADd,wBAMR,qBAAK/B,UAAWC,KAAO+R,YAAvB,SACI,cAAC,EAAD,CACIjQ,SAAU,aACVD,QAASsP,EACTa,SAAUN,EAHd,kC,uBC1FfO,GAAc,SACXjO,GACR,OAAOxB,EAASyH,IAAT,mCAAuFjG,EAAvF,qBAFFiO,GAAc,SAIZC,EAAsBC,EAAkBC,EAAeC,GAC9D,OAAO7P,EAASS,KAAsC,cAAe,CAACqP,KAAM,CAACJ,eAAcC,WAAUC,QAAOC,aALvGJ,GAAc,SAOZ7Q,GACP,OAAOoB,EAASU,OAAT,0BAAwE9B,KAR1E6Q,GAAc,SAUZjO,EAAamO,EAAkBI,EAAmBF,GACzD,OAAO7P,EAAS2H,IAAT,cAAiE,CAACmI,KAAM,CAACtO,MAAKmO,WAAUI,YAAWF,aCd5GG,GAAY,qBACZC,GAAe,wBACfC,GAAc,uBACdC,GAAc,uBACdC,GAAsB,+BACtBC,GAA0B,mCAC1BC,GAAmB,4BA4CnBvP,GAAiC,CACnCwP,SAAU,CACNC,MAAO,GACPC,gBAAiB,EACjBC,SAAU,EACVC,SAAU,EACVC,WAAY,GACZvI,KAAM,EACNC,UAAW,EACXrD,MAAO,GACPyD,eAAgB,GAEpBmI,WAAa,GACbC,cAAe,KACfC,gBAAiB,aAqERC,GAAuB,SAACD,GAAD,MAAsC,CAACpT,KAAM0S,GAAyBU,oBAG7FE,GAAgB,SAACzP,EAAakM,GAAd,OAAuC,SAAC7L,GACjE4N,GAAwBjO,GACnBM,MAAK,SAAAC,GAVqB,IAACmP,EAWxBrP,GAXwBqP,EAWKnP,EAAIuB,KAXmC,CAAC3F,KAAMqS,GAAWkB,kBAYtFrP,EANgE,CAAClE,KAAM2S,GAAkBO,WAMlErP,OAE1BQ,OAAM,SAAAvE,GACCwE,QAAQC,IAAIzE,QAKf0T,GAAe,SAACzB,EAAsBC,EAAkBC,EAAeC,GAAxD,OAA2E,SAAChO,GACpG4N,GAAuBC,EAAcC,EAAUC,EAAOC,GACjD/N,MAAK,SAAAC,GArBY,IAACqP,EAsBfvP,GAtBeuP,EAsBKrP,EAAIuB,KAtBiB,CAAC3F,KAAMsS,GAAcmB,gBAwBjEpP,OAAM,SAAAvE,GACCwE,QAAQC,IAAIzE,QAKf4T,GAAe,SAACzS,GAAD,OAAgB,SAACiD,GACzC4N,GAAuB7Q,GAClBkD,MAAK,SAAAC,GA/BY,IAACuP,EAgCfzP,GAhCeyP,EAgCKvP,EAAIuB,KAAKiO,YAAY/P,IAhCC,CAAC7D,KAAMuS,GAAaoB,sBAkCjEtP,OAAM,SAAAvE,GACCwE,QAAQC,IAAIzE,QAKf+T,GAAe,SAAChQ,EAAamO,EAAkBI,EAAmBF,GAAnD,OAAsE,SAAChO,GAC/F4N,GAAuBjO,EAAKmO,EAAUI,EAAWF,GAC5C/N,MAAK,SAAAC,GAzCY,IAAC0P,EA0Cf5P,GA1Ce4P,EA0CK1P,EAAIuB,KAAKmO,YA1CQ,CAAC9T,KAAMwS,GAAasB,oBA4C5DzP,OAAM,SAAAvE,GACCwE,QAAQC,IAAIzE,QC9JrB,SAASiU,KAEZ,IAAM7P,EAAWa,cACX8N,EAAQ7N,aAA2C,SAAAC,GAAK,OAAIA,EAAM+O,UAAUpB,SAASC,SACrF/E,EAAS9I,aAAsC,SAAAC,GAAK,OAAIA,EAAMC,MAAM7B,SAASQ,OAC7EqP,EAAalO,aAAsC,SAAAC,GAAK,OAAIA,EAAM+O,UAAUd,cAC5EE,EAAkBpO,aAA8C,SAAAC,GAAK,OAAIA,EAAM+O,UAAUZ,mBACzFD,EAAgBnO,aAAgD,SAAAC,GAAK,OAAIA,EAAM+O,UAAUb,iBAPxE,EASShO,mBAAiBhC,GAT1B,mBAShB6O,EATgB,KASNiC,EATM,OAUK9O,mBAAiBhC,GAVtB,mBAUhB+O,EAVgB,KAURgC,EAVQ,KAajBC,EAAgB3M,cAAYvG,GAC5B8O,EAAevI,cAAY/D,KAEjC+K,qBAAU,WACN2F,GAAiBpE,GAAgB7L,EAASoP,GAAca,MACzD,IAEH,IAeM1F,EAAqB,SAACxD,GACA,eAApBmI,GACAlP,EAASmP,GAAqB,cAEV,cAApBD,GACAlP,EAASmP,GAAqB,eAElCnP,EDwEyB,SAACiP,GAAD,MAAsC,CAACnT,KAAMyS,GAAqBU,iBCxElFiB,CAAkBnJ,KAG3BoJ,EAAWxB,EAEO,OAAlBM,GACAkB,EAAStF,MAAK,SAACC,EAAGC,GACd,OAAID,EAAEmE,GAAiBlE,EAAEkE,GACM,cAApBC,GAAmC,EAAI,EAE9CpE,EAAEmE,GAAiBlE,EAAEkE,GACM,cAApBC,EAAkC,GAAK,EAE3C,KAKf,IAAIhE,EAAmC,cAApBgE,EAAA,UAAqCvT,KAAO0B,IAA5C,YAAmD1B,KAAOwP,WAA1D,UAA2ExP,KAAO0B,IAAlF,YAAyF1B,KAAOyP,YAEnH,OAAO,qCACH,cAAChG,GAAD,IACA,qBAAK1J,UAAWC,KAAOyU,kBAAvB,SACI,qBAAK1U,UAAWC,KAAO0U,gBAAvB,SACI,sBAAK3U,UAAWC,KAAOyQ,aAAvB,UACI,sBAAK1Q,UAAWC,KAAO2U,aAAvB,UACI,cAAC,IAAD,CAAM3O,GAAIC,GAAKC,QAAf,SACI,cAAC,EAAD,CACIpE,SAAU,MADd,SAEI,sBAAM/B,UAAWC,KAAO4U,KAAxB,8BAGR,oBAAI7U,UAAWC,KAAO6U,SAAtB,SAAiC3E,OAErC,sBAAKnQ,UAAWC,KAAO4P,oBAAvB,UACI,cAAC,EAAD,CACIlP,SAAU,WACVP,KAAM,OACNE,aAAc+T,EACd3T,YAAU,IAEd,cAAC,EAAD,CACIC,SAAU,SACVP,KAAM,OACNE,aAAcgU,EACd5T,YAAU,IAEd,cAAC,EAAD,CACIqB,SAAU,aACVD,QAAS,kBAvEV,SAACqQ,EAAsBC,EAAkBC,EAAeC,GAC3EhO,EAASsP,GAAazB,EAAcC,EAAUC,EAAOC,IACrD+B,EAAY,IACZC,EAAU,IAoEyBS,CAAezB,EAAYlB,EAhFpD,EAgFqEE,IAF/D,6BAMJ,kCACI,gCACA,+BACI,oBAAItS,UAAWC,KAAOmS,SAAtB,SACI,wBAAQpS,UAA6B,aAAlBuT,EAA+B/D,EAAevP,KAAO0B,IAChEG,QAAS,kBAAM+M,EAAmB,aAD1C,wBAKJ,oBAAI7O,UAAWC,KAAOqS,OAAtB,SACI,wBAAQtS,UAA6B,WAAlBuT,EAA6B/D,EAAevP,KAAO0B,IAC9DG,QAAS,kBAAM+M,EAAmB,WAD1C,sBAKJ,oBAAI7O,UAAWC,KAAO8D,QAAtB,SACI,wBAAQ/D,UAA6B,YAAlBuT,EAA8B/D,EAAevP,KAAO0B,IAC/DG,QAAS,kBAAM+M,EAAmB,YAD1C,uBAKJ,oBAAI7O,UAAWC,KAAOoS,MAAtB,SACI,wBAAQrS,UAA6B,UAAlBuT,EAA4B/D,EAAevP,KAAO0B,IAC7DG,QAAS,kBAAM+M,EAAmB,UAD1C,qBAKJ,oBAAI7O,UAAWC,KAAO+P,QAAtB,0BAGJ,gCACCyE,EAASxE,UAAU3B,KAAI,SAAC4B,GAAD,OACpB,+BACI,6BAAKA,EAAKkC,WACV,6BAAKlC,EAAKoC,SACV,6BAAKlG,GAAY8D,EAAKnM,WACtB,6BAAKmM,EAAKmC,QACV,6BACKnC,EAAKhB,UAAYhB,EACZ,qCACE,cAAC,EAAD,CACInM,SAAU,YACVD,QAAS,kBA3G3B,SAACmC,EAAamO,EAAkBI,EAAmBF,GACzEhO,EAAS2P,GAAahQ,EAAKmO,EAAUI,EAAWF,IA0GO0C,CAAkB9E,EAAKjM,IAAK,mBAAoB,8CAA+C,mBAFlH,oBAKA,cAAC,EAAD,CACIlC,SAAU,YACVD,QAAS,kBApH1BT,EAoHkD6O,EAAKjM,SAnH9EK,EAASwP,GAAazS,IADA,IAACA,GAkHa,uBAMF,4BAnBd,cAAgB6O,EAAKjM,wBC1I1C,IAAMiC,GAAO,CAChBZ,MAAO,SACP+B,YAAa,uBACbV,iBAAkB,qBAClBmC,WAAY,eACZ3C,QAAS,WACTW,SAAU,YACV5G,MAAO,YACPkU,UAAW,yBAGR,SAASa,KACZ,OACI,qBAAKjV,UAAU,SAAf,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOkG,KAAK,IAAIgP,QAAS,cAAChQ,EAAD,MACzB,cAAC,IAAD,CAAOgB,KAAMA,GAAKZ,MAAO4P,QAAS,cAAChQ,EAAD,MAClC,cAAC,IAAD,CAAOgB,KAAMA,GAAKmB,YAAa6N,QAAS,cAACvN,GAAD,MACxC,cAAC,IAAD,CAAOzB,KAAMA,GAAKS,iBAAkBuO,QAAS,cAACxM,GAAD,MAC7C,cAAC,IAAD,CAAOxC,KAAMA,GAAK4C,WAAYoM,QAAS,cAAC,GAAD,MACvC,cAAC,IAAD,CAAOhP,KAAMA,GAAKC,QAAS+O,QAAS,cAAC7E,GAAD,MACpC,cAAC,IAAD,CAAOnK,KAAMA,GAAKY,SAAUoO,QAAS,cAACpE,GAAD,MACrC,cAAC,IAAD,CAAO5K,KAAMA,GAAKhG,MAAOgV,QAAS,cAACnV,EAAD,MAClC,cAAC,IAAD,CAAOmG,KAAMA,GAAKkO,UAAWc,QAAS,cAACf,GAAD,MACtC,cAAC,IAAD,CAAOjO,KAAM,IAAKgP,QAAS,cAACnV,EAAD,WCvB5BoV,OARf,WACI,OACI,qBAAKnV,UAAU,MAAf,SACI,cAACiV,GAAD,OCMGG,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB/Q,MAAK,YAAkD,IAA/CgR,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,kBCTR7R,GAAe,GCSfoS,GAAcC,aAAgB,CAChCvQ,M5BwBwB,WAA0H,IAAzHD,EAAwH,uDAA3E7B,EAAcuE,EAA6D,uCACjJ,OAAQA,EAAO3H,MACX,KAAKgD,EACD,OAAO,2BAAIiC,GAAX,IAAkB5B,SAAS,eAAKsE,EAAOtE,UAAWS,YAAY,IAElE,KAAKb,EACD,OAAO,2BACAgC,GADP,IAEI5B,SAAS,2BACF4B,EAAM5B,UADL,IAEJC,OAAQH,EACRI,QAASJ,EACTR,MAAOQ,EACPK,SAAS,EACTC,KAAMN,EACNO,qBAvCA,EAwCAb,YAAY,EACZc,QAASR,EACTS,UAAU,EACVC,IAAKV,EACLrD,MAAOqD,IAEXW,YAAY,IAGpB,KAAKZ,EACD,OAAO,2BAAI+B,GAAX,IAAkB5B,SAAS,2BAAK4B,EAAM5B,UAAZ,IAAsBR,WAAY8E,EAAOrC,qBAEvE,QACI,OAAOL,I4BpDfyB,STc2B,WAAoF,IAAnFzB,EAAkF,uDAAxD7B,GAAcuE,EAA0C,uCAC9G,OAAQA,EAAO3H,MACX,IAAK,8BACD,OAAO,2BAAIiF,GAAX,IAAkBtC,MAAOgF,EAAOhF,MAAOC,SAAU+E,EAAO/E,WAE5D,IAAK,wBACD,OAAO,2BAAIqC,GAAX,IAAkBuL,SAAU7I,EAAO6I,WAEvC,IAAK,qBACD,OAAO,2BAAIvL,GAAX,IAAkBnF,MAAO6H,EAAO7H,MAAO2Q,UAAW9I,EAAO8I,YAE7D,QACI,OAAOxL,ISzBfsB,iBvBFmC,WAAoF,IAAnFtB,EAAkF,uDAAxD7B,EAAcuE,EAA0C,uCACtH,OAAQA,EAAO3H,MACX,IAAK,0BACD,OAAO,2BAAIiF,GAAX,IAAkBtC,MAAOgF,EAAOhF,QAEpC,IAAK,iCACD,OAAO,2BAAIsC,GAAX,IAAkBgC,YAAaU,EAAOV,cAE1C,IAAK,+BACD,OAAO,2BAAIhC,GAAX,IAAkB+B,UAAWW,EAAOX,YAG5C,OAAO/B,GuBTPc,QDT0B,WAAoF,IAAnFd,EAAkF,uDAAxD7B,GACrD,OAAO6B,GCSP4I,WdgD6B,WAAsG,IAArG5I,EAAoG,uDAAjE7B,GAAcuE,EAAmD,uCAClI,OAAQA,EAAO3H,MACX,KAAKkK,GACD,OAAO,2BACAjF,GADP,IAEIwF,UAAU,aAAK9C,EAAO2D,cAAcb,WACpCC,KAAM/C,EAAO2D,cAAcZ,KAC3BC,UAAWhD,EAAO2D,cAAcX,UAChCC,oBAAqBjD,EAAO2D,cAAcV,oBAC1CC,cAAelD,EAAO2D,cAAcT,cACpCC,cAAenD,EAAO2D,cAAcR,cACpCxD,MAAOK,EAAO2D,cAAchE,MAC5ByD,eAAgBpD,EAAO2D,cAAcP,iBAG7C,KAAKZ,GACD,OAAO,2BAAIlF,GAAX,IAAkBwF,UAAU,CAAE9C,EAAO6D,aAAV,oBAA0BvG,EAAMwF,cAE/D,KAAKL,GACD,OAAO,2BAAInF,GAAX,IAAkBwF,UAAU,aAAKxF,EAAMwF,UAAUmE,QAAO,SAAA8G,GAAC,OAAIA,EAAE7R,MAAQ8D,EAAOgE,oBAElF,KAAKtB,GACD,OAAO,2BACApF,GADP,IACcwF,UAAU,aAAKxF,EAAMwF,UAAUyD,KAAI,SAAAwH,GAAC,OAAIA,EAAE7R,MAAQ8D,EAAOmE,YAAYjI,IACzE8D,EAAOmE,YACP4J,QAGd,KAAKpL,GACD,OAAO,2BAAIrF,GAAX,IAAkB+F,WAAYrD,EAAOqD,aAEzC,KAAKT,GACD,OAAO,2BAAItF,GAAX,IAAkBgG,SAAUtD,EAAOsD,WAEvC,KAAKT,GACD,OAAO,2BAAIvF,GAAX,IAAkBiG,WAAYvD,EAAOuD,aAEzC,QACI,OAAOjG,IcrFf+O,UNyD2B,WAAoF,IAAnF/O,EAAkF,uDAAxD7B,GAAcuE,EAA0C,uCAC9G,OAAQA,EAAO3H,MACX,KAAKqS,GACD,OAAO,2BACApN,GADP,IAEI2N,SAAS,2BACF3N,EAAM2N,UADL,IAEJC,MAAM,aAAKlL,EAAO4L,aAAaV,OAC/BC,gBAAiBnL,EAAO4L,aAAaT,gBACrCC,SAAUpL,EAAO4L,aAAaR,SAC9BC,SAAUrL,EAAO4L,aAAaP,SAC9BC,WAAYtL,EAAO4L,aAAaN,WAChCvI,KAAM/C,EAAO4L,aAAa7I,KAC1BC,UAAWhD,EAAO4L,aAAa5I,UAC/BrD,MAAOK,EAAO4L,aAAajM,MAC3ByD,eAAgBpD,EAAO4L,aAAaxI,mBAIhD,KAAKuH,GACD,OAAO,2BACArN,GADP,IAEI2N,SAAS,2BACF3N,EAAM2N,UADL,IAEJC,MAAM,CAAElL,EAAO8L,QAAQA,SAAlB,oBAA8BxO,EAAM2N,SAASC,YAI9D,KAAKN,GACD,OAAO,2BACAtN,GADP,IAEI2N,SAAS,2BACF3N,EAAM2N,UADL,IAEJC,MAAM,aAAK5N,EAAM2N,SAASC,MAAMjE,QAAO,SAAA8G,GAAC,OAAIA,EAAE7R,MAAQ8D,EAAOgM,sBAIzE,KAAKnB,GACD,OAAO,2BACAvN,GADP,IAEI2N,SAAS,2BACF3N,EAAM2N,UADL,IACeC,MAAM,aAAK5N,EAAM2N,SAASC,MAAM3E,KAAI,SAAAwH,GAAC,OAAIA,EAAE7R,MAAQ8D,EAAOmM,YAAYjQ,IACnF8D,EAAOmM,YACP4B,UAIjB,KAAKjD,GACD,OAAO,2BAAIxN,GAAX,IAAkBkO,cAAexL,EAAOwL,gBAE5C,KAAKT,GACD,OAAO,2BAAIzN,GAAX,IAAkBmO,gBAAiBzL,EAAOyL,kBAE9C,KAAKT,GACD,OAAO,2BAAI1N,GAAX,IAAkBiO,WAAYvL,EAAOuL,aAE1C,QACI,OAAOjO,MM/GN0Q,GAAQC,aAAYJ,GAAaK,aAAgBC,OAK9DC,OAAOJ,MAAQA,GCbfK,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACI,cAAC,GAAD,UAIZQ,SAASC,eAAe,SAG5BpB,M,kBCpBAvV,EAAOC,QAAU,CAAC,eAAiB,mCAAmC,iBAAmB,qCAAqC,oBAAsB,wCAAwC,WAAa,+BAA+B,QAAU,4BAA4B,QAAU,4BAA4B,IAAM,wBAAwB,UAAY,8BAA8B,WAAa,kC","file":"static/js/main.546f5616.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"registerWrapper\":\"Register_registerWrapper__12KPl\",\"registerWindow\":\"Register_registerWindow__16X8V\",\"logo\":\"Register_logo__2hlCH\",\"signUp\":\"Register_signUp__1HE51\",\"emailWrapper\":\"Register_emailWrapper__22iJx\",\"passwordWrapper\":\"Register_passwordWrapper__GPPGI\",\"spanError\":\"Register_spanError__1FA8h\",\"buttons\":\"Register_buttons__2V_13\",\"cancelBtn\":\"Register_cancelBtn__146eh\",\"registerBtn\":\"Register_registerBtn__2Mtpg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginWrapper\":\"Login_loginWrapper__uWpad\",\"loginWindow\":\"Login_loginWindow__88mxb\",\"logo\":\"Login_logo__25jOQ\",\"signIn\":\"Login_signIn__Ka9fc\",\"emailWrapper\":\"Login_emailWrapper__2ncZ7\",\"passwordWrapper\":\"Login_passwordWrapper__3iSGd\",\"forgotPasswordBtn\":\"Login_forgotPasswordBtn__r-bRq\",\"loginBtn\":\"Login_loginBtn__1txLL\",\"signUpBtn\":\"Login_signUpBtn__JN5Ay\",\"testSpanError\":\"Login_testSpanError__AfS6r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"passwordRecovery\":\"PasswordRecovery_passwordRecovery__3MM2Q\",\"passwordRecoveryWindow\":\"PasswordRecovery_passwordRecoveryWindow__O9YLt\",\"logo\":\"PasswordRecovery_logo__1EEiY\",\"forgotYourPassword\":\"PasswordRecovery_forgotYourPassword__16hs9\",\"emailWrapper\":\"PasswordRecovery_emailWrapper__2-bpk\",\"passwordWrapper\":\"PasswordRecovery_passwordWrapper__1aiCo\",\"sendInstructionsBtn\":\"PasswordRecovery_sendInstructionsBtn__2OWHG\",\"tryLoginBtn\":\"PasswordRecovery_tryLoginBtn__mqHCh\",\"title\":\"PasswordRecovery_title__1yOVY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2yZxh\",\"headerWrapper\":\"Header_headerWrapper__2j9jr\",\"logo\":\"Header_logo__oXwKy\",\"list\":\"Header_list__10nsz\",\"item\":\"Header_item__3iXL1\",\"packList\":\"Header_packList__2llqo\",\"profile\":\"Header_profile__2s8VQ\",\"activeItem\":\"Header_activeItem__zxbMN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalWrapper\":\"Modal_modalWrapper__1atgs\",\"active\":\"Modal_active__iY059\",\"modalContent\":\"Modal_modalContent__3tWff\",\"headerModalWrapper\":\"Modal_headerModalWrapper__VK10i\",\"modalTitle\":\"Modal_modalTitle__3BtHM\",\"closeBtn\":\"Modal_closeBtn__Bz_wj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPassword\":\"NewPassword_newPassword__22XLJ\",\"newPasswordWindow\":\"NewPassword_newPasswordWindow__2dJOk\",\"logo\":\"NewPassword_logo__UWaS5\",\"createNewPassword\":\"NewPassword_createNewPassword__2QFDD\",\"newPasswordWrapper\":\"NewPassword_newPasswordWrapper__3BTzF\",\"createNewPasswordBtn\":\"NewPassword_createNewPasswordBtn__HoRp7\",\"title\":\"NewPassword_title__14bG6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkEmail\":\"CheckEmail_checkEmail__CGYk0\",\"checkEmailWindow\":\"CheckEmail_checkEmailWindow__3lA7X\",\"logo\":\"CheckEmail_logo__33DSB\",\"checkEmailWrapper\":\"CheckEmail_checkEmailWrapper__1mpYR\",\"checkEmailImg\":\"CheckEmail_checkEmailImg__3cd3A\",\"title\":\"CheckEmail_title__STgW-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableContainer\":\"Profile_tableContainer__3iknM\",\"mainWrapper\":\"Profile_mainWrapper__3OA7v\",\"leftBar\":\"Profile_leftBar__3xaaT\",\"leftBarTitle\":\"Profile_leftBarTitle__3QtaT\",\"filterBtnsWrapper\":\"Profile_filterBtnsWrapper__27z06\",\"tableWrapper\":\"Profile_tableWrapper__3ugDe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"SuperInputText_inputWrapper__2qhCn\",\"errorInput\":\"SuperInputText_errorInput__bOIdy\",\"error\":\"SuperInputText_error__mus9T\",\"label\":\"SuperInputText_label__2lr1x\",\"inputStyle\":\"SuperInputText_inputStyle__yQjTG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkboxWrapper\":\"SuperCheckbox_checkboxWrapper__2SW4L\",\"checkbox\":\"SuperCheckbox_checkbox__3L3sr\",\"spanClassName\":\"SuperCheckbox_spanClassName__2O57e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"SuperButton_btn__o6zRb\",\"deleteBtn\":\"SuperButton_deleteBtn__2itn7\",\"bigDeleteBtn\":\"SuperButton_bigDeleteBtn__1bX00\",\"updateBtn\":\"SuperButton_updateBtn__3pbpk\",\"confirmBtn\":\"SuperButton_confirmBtn__1J_XL\",\"cancelBtn\":\"SuperButton_cancelBtn__2GROZ\",\"filteMyBtn\":\"SuperButton_filteMyBtn__2bIMA\",\"filterAllBtn\":\"SuperButton_filterAllBtn__ifk7C\",\"filterMyBtnActive\":\"SuperButton_filterMyBtnActive__C02oS\",\"filterAllBtnActive\":\"SuperButton_filterAllBtnActive__2ezSt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listCardContainer\":\"ListCard_listCardContainer__3szJH\",\"listCardWrapper\":\"ListCard_listCardWrapper__3SdtY\",\"tableWrapper\":\"ListCard_tableWrapper__scrl3\",\"titleWrapper\":\"ListCard_titleWrapper__2p8ig\",\"packName\":\"ListCard_packName__Sou3A\",\"back\":\"ListCard_back__1KnGx\",\"addPacksFormWrapper\":\"ListCard_addPacksFormWrapper__3iRuA\",\"actions\":\"ListCard_actions__2AqJF\",\"updated\":\"ListCard_updated__33qYf\",\"grade\":\"ListCard_grade__2HZDS\",\"btn\":\"ListCard_btn__1aUl7\",\"ascending\":\"ListCard_ascending__1RW70\",\"descending\":\"ListCard_descending__8Je9U\"};","import React from 'react';\r\nimport styles from './Error404.module.css'\r\n\r\n\r\nexport function Error404() {\r\n  return (\r\n    <div className={styles.error}>\r\n      Error!\r\n    </div>\r\n  );\r\n}\r\n\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n\r\ntype SuperInputTextPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n    inputStyle?: boolean\r\n    formName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type,\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName, inputStyle,\r\n        formName,\r\n\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange\r\n        && onChange(e)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter\r\n        && e.key === 'Enter'\r\n        && onEnter()\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${s.errorInput} ${className}`\r\n    const InputStyleClassName = inputStyle ? s.inputStyle : ''\r\n    return (\r\n        <div className={s.inputWrapper}>\r\n            {error\r\n                ? <label className={finalSpanClassName} htmlFor={type}>{error}</label>\r\n                : <label className={s.label} htmlFor={type}>{formName}</label>\r\n            }\r\n            <input\r\n                id={type}\r\n                type={type}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={`${finalInputClassName} ${InputStyleClassName}`}\r\n                {...restProps}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps, MouseEvent} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    btn?: boolean\r\n    onClick?: () => void\r\n    classBtn?: string\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        className, btn,\r\n        color,\r\n        onClick, classBtn,\r\n        ...restProps\r\n    }\r\n) => {\r\n\r\n    const onClickCallback = (e: MouseEvent<HTMLButtonElement>) => {\r\n        onClick && onClick(e)\r\n    }\r\n\r\n    let btnClassName\r\n    if (classBtn === 'btn') {\r\n        btnClassName = s.btn\r\n    }\r\n    if (classBtn === 'deleteBtn') {\r\n        btnClassName = `${s.btn} ${s.deleteBtn}`\r\n    }\r\n    if (classBtn === 'updateBtn') {\r\n        btnClassName = `${s.btn} ${s.updateBtn}`\r\n    }\r\n    if (classBtn === 'confirmBtn') {\r\n        btnClassName = `${s.btn} ${s.confirmBtn}`\r\n    }\r\n    if (classBtn === 'cancelBtn') {\r\n        btnClassName = `${s.btn} ${s.cancelBtn}`\r\n    }\r\n    if (classBtn === 'deleteBtn') {\r\n        btnClassName = `${s.btn} ${s.deleteBtn}`\r\n    }\r\n    if (classBtn === 'bigDeleteBtn') {\r\n        btnClassName = `${s.btn} ${s.bigDeleteBtn}`\r\n    }\r\n    if (classBtn === 'filteMyBtn') {\r\n        btnClassName = `${s.btn} ${s.filteMyBtn}`\r\n    }\r\n    if (classBtn === 'filterAllBtn') {\r\n        btnClassName = `${s.btn} ${s.filterAllBtn}`\r\n    }\r\n    if (classBtn === 'filterMyBtnActive') {\r\n        btnClassName = `${s.btn} ${s.filterMyBtnActive}`\r\n    }\r\n    if (classBtn === 'filterAllBtnActive') {\r\n        btnClassName = `${s.btn} ${s.filterAllBtnActive}`\r\n    }\r\n\r\n    return (\r\n        <button\r\n            onClick={onClickCallback}\r\n            className={btnClassName}\r\n            {...restProps}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true,\r\n})","import {AxiosResponse} from 'axios'\r\nimport {instance} from \"./api-instance\";\r\n\r\nexport const authApi = {\r\n    loginUser(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<any, AxiosResponse<ResponseLoginType>>('auth/login', {email, password, rememberMe})\r\n    },\r\n    authUser() {\r\n        return instance.post<any, AxiosResponse<ResponseLoginType>>('auth/me')\r\n    },\r\n    logoutUser() {\r\n        return instance.delete<any, AxiosResponse<ResponseLoginType>>('auth/me')\r\n    },\r\n}\r\n\r\nexport type ResponseLoginType = {\r\n    avatar?: string\r\n    created: string\r\n    email: string\r\n    isAdmin: boolean\r\n    name: string\r\n    publicCardPacksCount: number\r\n    rememberMe: boolean\r\n    updated: string\r\n    verified: boolean;\r\n    _id: string\r\n    error?: string\r\n}\r\n","import {Dispatch} from \"react\";\r\nimport {authApi, ResponseLoginType} from \"../../../main/dal/auth-api\";\r\n\r\nconst AUTH_USER = 'login/AUTH_USER'\r\nconst SET_STATUS = 'login/SET_STATUS'\r\nconst DELETE_USER = 'login/DELETE_USER'\r\nconst ERROR_AUTH = 'login/ERROR_AUTH'\r\nconst CHANGE_REMEMBER_ME_STUSUS = 'login/CHANGE_REMEMBER_ME_STUSUS'\r\n\r\nexport const EMPTY_STRING = ''\r\nexport const ZERO = 0\r\n\r\nexport type InitialStateType<T> = {\r\n    userData: T\r\n    authStatus: boolean\r\n}\r\n\r\nconst initialState: InitialStateType<ResponseLoginType> = {\r\n    userData: {\r\n        avatar: EMPTY_STRING,\r\n        created: EMPTY_STRING,\r\n        email: EMPTY_STRING,\r\n        isAdmin: false,\r\n        name: EMPTY_STRING,\r\n        publicCardPacksCount: ZERO,\r\n        rememberMe: false,\r\n        updated: EMPTY_STRING,\r\n        verified: false,\r\n        _id: EMPTY_STRING,\r\n        error: EMPTY_STRING,\r\n    },\r\n    authStatus: false\r\n}\r\n\r\nexport const loginReducer = (state: InitialStateType<ResponseLoginType> = initialState, action: ActionsType): InitialStateType<ResponseLoginType> => {\r\n    switch (action.type) {\r\n        case AUTH_USER: {\r\n            return {...state, userData: {...action.userData}, authStatus: true}\r\n        }\r\n        case DELETE_USER: {\r\n            return {\r\n                ...state,\r\n                userData: {\r\n                    ...state.userData,\r\n                    avatar: EMPTY_STRING,\r\n                    created: EMPTY_STRING,\r\n                    email: EMPTY_STRING,\r\n                    isAdmin: false,\r\n                    name: EMPTY_STRING,\r\n                    publicCardPacksCount: ZERO,\r\n                    rememberMe: false,\r\n                    updated: EMPTY_STRING,\r\n                    verified: false,\r\n                    _id: EMPTY_STRING,\r\n                    error: EMPTY_STRING,\r\n                },\r\n                authStatus: false\r\n            }\r\n        }\r\n        case CHANGE_REMEMBER_ME_STUSUS: {\r\n            return {...state, userData: {...state.userData, rememberMe: action.rememberMeStatus}}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const authUserRequest = (userData: ResponseLoginType) => ({type: AUTH_USER, userData} as const)\r\nexport const logoutUserRequest = () => ({type: DELETE_USER} as const)\r\nexport const errorAuthUser = (error: string | undefined) => ({type: ERROR_AUTH, error} as const)\r\nexport const setRememberMeStatus = (rememberMeStatus: boolean) => ({\r\n    type: CHANGE_REMEMBER_ME_STUSUS,\r\n    rememberMeStatus\r\n} as const)\r\n\r\nexport const loginTC = (email: string, password: string, rememberMeStatus: boolean) => (dispatch: Dispatch<ActionsType>) => {\r\n    authApi.loginUser(email, password, rememberMeStatus)\r\n        .then(res => {\r\n            dispatch(authUserRequest(res.data))\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorAuthUser(error.error))\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    authApi.logoutUser()\r\n        .then(res => {\r\n            dispatch(logoutUserRequest())\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n        })\r\n}\r\n\r\nexport const authUserTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    authApi.authUser()\r\n        .then(res => {\r\n            dispatch(authUserRequest({...res.data}))\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorAuthUser(error.error))\r\n        })\r\n}\r\n\r\nexport type ActionsType = ReturnType<typeof authUserRequest>\r\n    | ReturnType<typeof errorAuthUser>\r\n    | ReturnType<typeof setRememberMeStatus>\r\n    | ReturnType<typeof logoutUserRequest>","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label className={s.checkboxWrapper}>\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React, {useState} from 'react';\r\nimport styles from './Login.module.css'\r\nimport SuperInputText from \"../../../main/ui/common/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../../main/ui/common/c2-SuperButton/SuperButton\";\r\nimport {EMPTY_STRING, loginTC} from \"./login-reduser\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../main/bll/store\";\r\nimport {path} from \"../../../main/ui/routes/Routes\";\r\nimport {Link, Navigate} from \"react-router-dom\";\r\nimport SuperCheckbox from \"../../../main/ui/common/c3-SuperCheckbox/SuperCheckbox\";\r\n\r\n\r\nexport function Login() {\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | undefined>(state => state.login.userData.error)\r\n    const authStatus = useSelector<AppRootStateType, boolean>(state => state.login.authStatus)\r\n\r\n    const [email, setEmail] = useState<string>(EMPTY_STRING)\r\n    const [password, setpassword] = useState<string>(EMPTY_STRING)\r\n    const [rememberMeStatus, setRememberMeStatus] = useState<boolean>(false)\r\n    const emailError = email ? EMPTY_STRING : 'email error'\r\n    const passwordError = password ? EMPTY_STRING : 'password error'\r\n\r\n    const sendLoginRequest = (email: string, password: string, rememberMeStatus: boolean) => {\r\n        dispatch(loginTC(email, password, rememberMeStatus))\r\n    }\r\n\r\n    if (authStatus) {\r\n        return <Navigate to={path.profile}/>\r\n    } else {\r\n        return (\r\n            <div className='container'>\r\n                <div className={styles.loginWrapper}>\r\n                    <div className={styles.loginWindow}>\r\n                        <h1 className={styles.logo}>It-incubator</h1>\r\n                        {error\r\n                            ? <h2 className={styles.signIn}>{error}</h2>\r\n                            : <h2 className={styles.signIn}>Sign In</h2>\r\n                        }\r\n                        <div className={styles.emailWrapper}>\r\n                            <SuperInputText\r\n                                formName={'Email'}\r\n                                type={'email'}\r\n                                value={email}\r\n                                onChangeText={setEmail}\r\n                                error={emailError}\r\n                                inputStyle\r\n                            />\r\n                        </div>\r\n                        <div className={styles.passwordWrapper}>\r\n                            <SuperInputText\r\n                                className={styles.password}\r\n                                formName={'Password'}\r\n                                type={'password'}\r\n                                value={password}\r\n                                onChangeText={setpassword}\r\n                                error={passwordError}\r\n                                inputStyle\r\n                            />\r\n                        </div>\r\n                        <div className={styles.forgotPasswordBtn}>\r\n                            <SuperCheckbox\r\n                                children={'Remember me'}\r\n                                checked={rememberMeStatus}\r\n                                onChangeChecked={setRememberMeStatus}/>\r\n                            <Link to={path.passwordRecovery}>\r\n                                <SuperButton\r\n                                    classBtn={'btn'}>\r\n                                    Forgot password\r\n                                </SuperButton>\r\n                            </Link>\r\n                        </div>\r\n                        <div className={styles.loginBtn}>\r\n                            <SuperButton\r\n                                classBtn={'confirmBtn'}\r\n                                onClick={() => sendLoginRequest(email, password, rememberMeStatus)}>\r\n                                Login\r\n                            </SuperButton>\r\n                        </div>\r\n                        <span>Don’t have an account?</span>\r\n                        <div className={styles.signUpBtn}>\r\n                            <Link to={path.register}>\r\n                                <SuperButton\r\n                                    classBtn={'btn'}>\r\n                                    Sign Up\r\n                                </SuperButton>\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import axios from 'axios';\r\n\r\nexport const apiServices = axios.create({\r\n    baseURL: `https://neko-back.herokuapp.com/2.0`,\r\n});","import {apiServices} from \"../api\";\r\n\r\nexport const apiRecoveryPassword = {\r\n    getInstructions(email: string) {\r\n        return apiServices.post(`auth/forgot`, {\r\n            email, from: \"Administrator <admin@gmail.com>\",\r\n            message: `<div><a href=\"https://neko-back.herokuapp.com/2.0/#/New-password/$token$\">Ссылка на востановление пароля<a/></div>`\r\n        })\r\n    },\r\n    sendNewPassword(resetPasswordToken: string, password: string) {\r\n        return apiServices.post(`auth/set-new-password`,\r\n            {resetPasswordToken, password})\r\n    }\r\n};","import {Dispatch} from \"react\";\r\nimport {apiRecoveryPassword} from \"../../../main/ui/api/apiRecoveryPassword/apiRecoveryPassword\";\r\n\r\nconst initialState = {\r\n    email: '',\r\n    isSending: false,\r\n    newPassword: '',\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const passwordRecoveryReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"PASS-RECOVERY/SET_EMAIL\": {\r\n            return {...state, email: action.email}\r\n        }\r\n        case \"PASS-RECOVERY/SET_NEW_PASSWORD\": {\r\n            return {...state, newPassword: action.newPassword}\r\n        }\r\n        case \"PASS-RECOVERY/SET_IS_SENDING\": {\r\n            return {...state, isSending: action.isSending}\r\n        }\r\n    }\r\n    return state\r\n}\r\n//actions\r\nexport const setEmail = (email: string) => ({\r\n    type: \"PASS-RECOVERY/SET_EMAIL\",\r\n    email\r\n} as const)\r\nexport const setNewPassword = (newPassword: string) => ({\r\n    type: \"PASS-RECOVERY/SET_NEW_PASSWORD\",\r\n    newPassword\r\n} as const)\r\nexport const setSending = (isSending: boolean) => ({\r\n    type: \"PASS-RECOVERY/SET_IS_SENDING\",\r\n    isSending,\r\n} as const)\r\n// thunks\r\nexport const sendInstructions = (email: string) => {\r\n    return (dispatch: Dispatch<SetSendingType>) => {\r\n        apiRecoveryPassword.getInstructions(email).then()\r\n        dispatch(setSending(true))\r\n    }\r\n}\r\nexport const sendNewPassword = (token: string, password: string) => {\r\n    return (dispatch: Dispatch<SetSendingType>) => {\r\n        apiRecoveryPassword.sendNewPassword(token, password).then();\r\n        dispatch(setSending(true));\r\n    }\r\n}\r\n// types\r\nexport type SetSendingType = ReturnType<typeof setSending>\r\nexport type SetNewPasswordType = ReturnType<typeof setNewPassword>\r\nexport type SetEmailType = ReturnType<typeof setEmail>\r\ntype ActionsType =\r\n    SetSendingType |\r\n    SetNewPasswordType |\r\n    SetEmailType\r\n\r\n\r\n","import React from 'react';\r\nimport styles from './NewPassword.module.css'\r\nimport SuperInputText from \"../../../../main/ui/common/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../../../main/ui/common/c2-SuperButton/SuperButton\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../../main/bll/store\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useNewPasswordHandler} from \"../../../../hooks/newPasswordHandler/newPasswordHandler\";\r\nimport {path} from \"../../../../main/ui/routes/Routes\";\r\nimport {sendNewPassword, setNewPassword} from \"../password-recovery-reduser\";\r\n\r\n\r\nexport function NewPassword() {\r\n    const newPassword = useSelector((state: AppRootStateType) => state.passwordRecovery.newPassword)\r\n    const isSending = useSelector((state: AppRootStateType) => state.passwordRecovery.isSending)\r\n    const {token} = useParams() as { token: string; }\r\n    let navigate = useNavigate();\r\n    const {\r\n        onChange,\r\n        onClick,\r\n        newPasswordError\r\n    } = useNewPasswordHandler({\r\n        action: setNewPassword,\r\n        thunk: sendNewPassword,\r\n        newPassword,\r\n        token\r\n    })\r\n    if (isSending) {\r\n        navigate(`${path.login}`)\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className={styles.newPassword}>\r\n                <div className={styles.newPasswordWindow}>\r\n                    <h1 className={styles.logo}>It-incubator</h1>\r\n                    <h2 className={styles.createNewPassword}>Create New Password</h2>\r\n                    <div className={styles.newPasswordWrapper}>\r\n                        <SuperInputText\r\n                            formName={'Password'}\r\n                            type={'password'}\r\n                            value={newPassword}\r\n                            onChangeText={onChange}\r\n                            onEnter={onClick}\r\n                            error={newPasswordError}\r\n                            inputStyle\r\n                        />\r\n                    </div>\r\n                    <span className={styles.title}>Create new password and we will send you further instructions to email</span>\r\n                    <div className={styles.createNewPasswordBtn}>\r\n                        <SuperButton\r\n                            classBtn={'confirmBtn'}\r\n                            onClick={onClick}>\r\n                            Create New Password\r\n                        </SuperButton>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import {useDispatch} from \"react-redux\";\r\nimport {Dispatch, useState} from \"react\";\r\nimport {SetNewPasswordType} from \"../../features/feature1-auth/Password-recovery/password-recovery-reduser\";\r\n\r\ntype ThunkType = (dispatch: Dispatch<any>) => void\r\ntype useNewPasswordHandlerType = {\r\n    action: (newPassword: string) => SetNewPasswordType,\r\n    thunk: (token: string, newPassword: string) => ThunkType,\r\n    newPassword: string\r\n    token: string\r\n}\r\nexport const useNewPasswordHandler = ({\r\n                                          action,\r\n                                          thunk,\r\n                                          newPassword,\r\n                                          token,\r\n                                      }: useNewPasswordHandlerType) => {\r\n    const [newPasswordError, setNewPasswordError] = useState<string>('');\r\n    const dispatch = useDispatch()\r\n\r\n    const onChange = (newPassword: string) => {\r\n        setNewPasswordError('');\r\n        dispatch(action(newPassword));\r\n    }\r\n    const onClick = () => {\r\n        if (!newPassword) {\r\n            setNewPasswordError('Введите пароль')\r\n        } else if (newPassword.length < 4) {\r\n            setNewPasswordError('Пароль не менее 4 символов');\r\n        }\r\n        dispatch(thunk(token, newPassword));\r\n    }\r\n    return {onChange, onClick, newPasswordError}\r\n}","import React from 'react';\r\nimport styles from './PasswordRecovery.module.css'\r\nimport SuperInputText from \"../../../main/ui/common/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../../main/ui/common/c2-SuperButton/SuperButton\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../main/bll/store\";\r\nimport {sendInstructions, setEmail} from \"./password-recovery-reduser\";\r\nimport {usePasswordRecoveryHandler} from \"../../../hooks/passwordRecoveryHandler/passwordRecoveryHandler\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {path} from \"../../../main/ui/routes/Routes\";\r\n\r\n\r\nexport function PasswordRecovery() {\r\n    const email = useSelector((state: AppRootStateType) => state.passwordRecovery.email)\r\n    const isSending = useSelector((state: AppRootStateType) => state.passwordRecovery.isSending)\r\n    let navigate = useNavigate();\r\n    const {\r\n        onChange,\r\n        onClick,\r\n        emailError\r\n    } = usePasswordRecoveryHandler({action: setEmail, thunk: sendInstructions, email});\r\n\r\n    if (isSending) {\r\n        navigate(`${path.checkEmail}`)\r\n    }\r\n    const showEmail = () => {\r\n        if (emailError) {\r\n            alert('Неверный Адрес')\r\n        } else {\r\n            alert(email)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className={styles.passwordRecovery}>\r\n                <div className={styles.passwordRecoveryWindow}>\r\n                    <h1 className={styles.logo}>It-incubator</h1>\r\n                    <h2 className={styles.forgotYourPassword}>Forgot your password ?</h2>\r\n                    <div className={styles.emailWrapper}>\r\n                        <SuperInputText\r\n                            formName={'Email'}\r\n                            type={'email'}\r\n                            value={email}\r\n                            onChangeText={onChange}\r\n                            onEnter={showEmail}\r\n                            error={emailError}\r\n                            inputStyle\r\n                        />\r\n                    </div>\r\n                    <span className={styles.title}>Enter your email address and we will send you further instructions </span>\r\n                    <div className={styles.sendInstructionsBtn}>\r\n                        <SuperButton\r\n                            classBtn={'confirmBtn'}\r\n                            onClick={onClick}>\r\n                            Send Instructions\r\n                        </SuperButton>\r\n                    </div>\r\n                    <span className={styles.title}>Did you remember your password?</span>\r\n                    <div className={styles.tryLoginBtn}>\r\n                        <Link to={path.login}>\r\n                            <SuperButton\r\n                                classBtn={'btn'}>\r\n                                Try logging in\r\n                            </SuperButton>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import {useDispatch} from \"react-redux\";\r\nimport {Dispatch, useState} from \"react\";\r\nimport {SetEmailType} from \"../../features/feature1-auth/Password-recovery/password-recovery-reduser\";\r\n\r\n\r\ntype ThunkType = (dispatch: Dispatch<any>) => void\r\ntype usePasswordRecoveryHandlerType = {\r\n    action: (email: string) => SetEmailType,\r\n    thunk: (email: string) => ThunkType,\r\n    email: string\r\n}\r\nexport const usePasswordRecoveryHandler = ({\r\n                                               action,\r\n                                               thunk,\r\n                                               email,\r\n                                           }: usePasswordRecoveryHandlerType) => {\r\n    const [emailError, setEmailError] = useState<string>('');\r\n    const dispatch = useDispatch()\r\n\r\n    const onChange = (email: string) => {\r\n        setEmailError('');\r\n        dispatch(action(email));\r\n    }\r\n    const onClick = () => {\r\n        if (!email) {\r\n            setEmailError('Введите адрес')\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\r\n            setEmailError('Неправильный адрес');\r\n        }\r\n        dispatch(thunk(email));\r\n    }\r\n    return {onChange, onClick, emailError}\r\n}","export default __webpack_public_path__ + \"static/media/checkEmail.bc3a4042.svg\";","import React from 'react';\r\nimport styles from './CheckEmail.module.css'\r\nimport checkEmail from '../../../../main/ui/assets/img/icons/checkEmail.svg'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../main/bll/store\";\r\n\r\n\r\nexport const CheckEmail = () => {\r\n    const email = useSelector((state: AppRootStateType) => state.passwordRecovery.email)\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className={styles.checkEmail}>\r\n                <div className={styles.checkEmailWindow}>\r\n                    <h1 className={styles.logo}>It-incubator</h1>\r\n                    <div className={styles.checkEmailWrapper}>\r\n                        <div className={styles.checkEmailImg}>\r\n                            <img src={checkEmail} alt={'checkEmail'}/>\r\n                        </div>\r\n                        <h2>Check Email</h2>\r\n                    </div>\r\n                    <span className={styles.title}> We’ve sent an Email with instructions to {email}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react'\r\nimport styles from './Header.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {path} from \"../routes/Routes\";\r\n\r\n\r\nexport function Header() {\r\n    return (\r\n        <div className={styles.header}>\r\n            <div className='container'>\r\n                <div className={styles.headerWrapper}>\r\n                    <NavLink to={path.login}>\r\n                        <h1 className={styles.logo}>It-incubator</h1>\r\n                    </NavLink>\r\n                    <ul className={styles.list}>\r\n                        <li className={`${styles.item} ${styles.activeItem}`}>\r\n                            <NavLink className={styles.packList} to={path.profile}>Pack list</NavLink>\r\n                        </li>\r\n                        <li className={styles.item}>\r\n                            <NavLink className={styles.profile} to={path.profile}>Profile</NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import {instance} from \"./api-instance\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {InitialCardPacksStateType} from \"../../features/feature2-table/cards-table/cardsTable-reduser\";\r\n\r\n\r\nexport const cardPacksApi = {\r\n    getCardPacks() {\r\n        return instance.get<any, AxiosResponse<InitialCardPacksStateType>>('/cards/pack?pageCount=1000&page=1&sortPacks=0updated')\r\n    },\r\n    createCardPack(name: string) {\r\n        return instance.post<any, AxiosResponse<any>>('/cards/pack', {cardsPack: {name}})\r\n    },\r\n    deleteCardPack(id: string) {\r\n        return instance.delete<any, AxiosResponse<any>>(`/cards/pack?id=${id}`)\r\n    },\r\n    updateCardPack(id: string, name: string) {\r\n        return instance.put<any, AxiosResponse<any>>(`/cards/pack`, {\r\n            cardsPack: {\r\n                _id: id,\r\n                name,\r\n                deckCover: \"\"\r\n            }\r\n        })\r\n    },\r\n}","import {Dispatch} from \"react\";\r\nimport {cardPacksApi} from \"../../../main/dal/cardPacks-api\";\r\n\r\nconst GET_CARD_PACKS = 'table/GET_CARDS'\r\nconst SET_CARD_PACK = 'table/SET_CARD_PACK'\r\nconst REMOVE_CARD_PACK = 'table/REMOVE_CARD_PACK'\r\nconst UPDATE_CARD_PACK = 'table/UPDATE_CARD_PACK'\r\nconst CHANGE_FILTER = 'table/CHANGE_FILTER'\r\nconst CHANGE_SORTING = 'table/CHANGE_SORTING'\r\nconst CHANGE_SORT_CONFIG = 'table/CHANGE_SORT_CONFIG'\r\n\r\nexport type CardPackType = {\r\n    _id: string\r\n    user_id: string\r\n    user_name: string\r\n    private: false\r\n    name: string\r\n    path: string\r\n    grade: number\r\n    shots: number\r\n    deckCover: string\r\n    cardsCount: number\r\n    type: string,\r\n    rating: number\r\n    created: string\r\n    updated: string\r\n    more_id: string\r\n    __v: number\r\n}\r\n\r\nexport type FilteringType = 'my' | 'all'\r\nexport type SortingType = 'name' | 'cardsCount' | 'updated' | 'user_name' | null\r\nexport type SortConfigType = 'ascending' | 'descending'\r\n\r\nexport type InitialCardPacksStateType = {\r\n    cardPacks: CardPackType[]\r\n    page: number\r\n    pageCount: number\r\n    cardPacksTotalCount: number\r\n    minCardsCount: number\r\n    maxCardsCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n    filteredBy: FilteringType\r\n    sortedBy: SortingType\r\n    sortConfig: SortConfigType\r\n}\r\n\r\nconst initialState: InitialCardPacksStateType = {\r\n    cardPacks: [],\r\n    page: 0,\r\n    pageCount: 0,\r\n    cardPacksTotalCount: 0,\r\n    minCardsCount: 0,\r\n    maxCardsCount: 0,\r\n    token: \"\",\r\n    tokenDeathTime: 0,\r\n    filteredBy: \"all\",\r\n    sortedBy: null,\r\n    sortConfig: 'ascending'\r\n}\r\n\r\nexport const cardsTableReducer = (state: InitialCardPacksStateType = initialState, action: ActionsType): InitialCardPacksStateType => {\r\n    switch (action.type) {\r\n        case GET_CARD_PACKS: {\r\n            return {\r\n                ...state,\r\n                cardPacks: [...action.cardPacksData.cardPacks],\r\n                page: action.cardPacksData.page,\r\n                pageCount: action.cardPacksData.pageCount,\r\n                cardPacksTotalCount: action.cardPacksData.cardPacksTotalCount,\r\n                minCardsCount: action.cardPacksData.minCardsCount,\r\n                maxCardsCount: action.cardPacksData.maxCardsCount,\r\n                token: action.cardPacksData.token,\r\n                tokenDeathTime: action.cardPacksData.tokenDeathTime,\r\n            }\r\n        }\r\n        case SET_CARD_PACK: {\r\n            return {...state, cardPacks: [action.newCardPack, ...state.cardPacks],}\r\n        }\r\n        case REMOVE_CARD_PACK: {\r\n            return {...state, cardPacks: [...state.cardPacks.filter(p => p._id !== action.deletedPackId)]}\r\n        }\r\n        case UPDATE_CARD_PACK: {\r\n            return {\r\n                ...state, cardPacks: [...state.cardPacks.map(p => p._id === action.updatedPack._id\r\n                    ? action.updatedPack\r\n                    : p)]\r\n            }\r\n        }\r\n        case CHANGE_FILTER: {\r\n            return {...state, filteredBy: action.filteredBy}\r\n        }\r\n        case CHANGE_SORTING: {\r\n            return {...state, sortedBy: action.sortedBy}\r\n        }\r\n        case CHANGE_SORT_CONFIG: {\r\n            return {...state, sortConfig: action.sortConfig}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const takeCardPacksRequest = (cardPacksData: InitialCardPacksStateType) => ({\r\n    type: GET_CARD_PACKS,\r\n    cardPacksData\r\n} as const)\r\nexport const setNewCardPack = (newCardPack: any) => ({type: SET_CARD_PACK, newCardPack} as const)\r\nexport const deleteNewCardPack = (deletedPackId: string) => ({type: REMOVE_CARD_PACK, deletedPackId} as const)\r\nexport const updateCardPack = (updatedPack: any) => ({type: UPDATE_CARD_PACK, updatedPack} as const)\r\nexport const changeFiltering = (filteredBy: FilteringType) => ({type: CHANGE_FILTER, filteredBy} as const)\r\nexport const changeSorting = (sortedBy: SortingType) => ({type: CHANGE_SORTING, sortedBy} as const)\r\nexport const changeSortConfig = (sortConfig: SortConfigType) => ({type: CHANGE_SORT_CONFIG, sortConfig} as const)\r\n\r\nexport const getCardPacksTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    cardPacksApi.getCardPacks()\r\n        .then(res => {\r\n            dispatch(takeCardPacksRequest(res.data))\r\n        })\r\n        .catch(error => {\r\n                console.log(error)\r\n            }\r\n        )\r\n}\r\n\r\nexport const setNewCardPackTC = (name: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    cardPacksApi.createCardPack(name)\r\n        .then(res => {\r\n            dispatch(setNewCardPack(res.data.newCardsPack))\r\n        })\r\n        .catch(error => {\r\n                console.log(error)\r\n            }\r\n        )\r\n}\r\n\r\nexport const deleteCardPackTC = (id: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    cardPacksApi.deleteCardPack(id)\r\n        .then(res => {\r\n            dispatch(deleteNewCardPack(res.data.deletedCardsPack._id))\r\n        })\r\n        .catch(error => {\r\n                console.log(error)\r\n            }\r\n        )\r\n}\r\n\r\nexport const updateCardPackTC = (id: string, name: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    cardPacksApi.updateCardPack(id, name)\r\n        .then(res => {\r\n            dispatch(updateCardPack(res.data.updatedCardsPack))\r\n        })\r\n        .catch(error => {\r\n                console.log(error)\r\n            }\r\n        )\r\n}\r\n\r\nexport type ActionsType = ReturnType<typeof takeCardPacksRequest>\r\n    | ReturnType<typeof setNewCardPack>\r\n    | ReturnType<typeof deleteNewCardPack>\r\n    | ReturnType<typeof updateCardPack>\r\n    | ReturnType<typeof changeFiltering>\r\n    | ReturnType<typeof changeSorting>\r\n    | ReturnType<typeof changeSortConfig>\r\n","export const dateChanger = (date: string) => {\r\n    let changedDate = new Date(Date.parse(date))\r\n    const checkingDate = (d: number) => {\r\n        return d >= 10 ? d : `0${d}`\r\n    }\r\n    let day = checkingDate(changedDate.getDay())\r\n    let month = checkingDate(changedDate.getMonth())\r\n    let year = checkingDate(changedDate.getFullYear())\r\n    let hours = checkingDate(changedDate.getHours())\r\n    let minutes = checkingDate(changedDate.getMinutes())\r\n    return `${day}.${month}.${year} in ${hours}:${minutes}`\r\n}","import React, {FC} from 'react';\r\nimport styles from './Modal.module.css'\r\nimport SuperButton from \"../c2-SuperButton/SuperButton\";\r\n\r\n\r\nexport type ModalType = {\r\n    index: number\r\n    active: Array<boolean>\r\n    setActive: (activeModal: Array<boolean>) => void\r\n    title: string\r\n}\r\n\r\n\r\nexport const Modal: FC<ModalType> = ({active, setActive, index, title, children}) => {\r\n\r\n    return (\r\n        <div\r\n            className={active[index] ? `${styles.modalWrapper} ${styles.active}` : styles.modalWrapper}\r\n            onClick={() => setActive([false])}>\r\n            <div\r\n                className={active[index] ? `${styles.modalContent} ${styles.active}` : styles.modalContent}\r\n                onClick={event => event.stopPropagation()}>\r\n                <div className={styles.headerModalWrapper}>\r\n                    <h3 className={styles.modalTitle}>{title}</h3>\r\n                    <SuperButton\r\n                        classBtn={'btn'}\r\n                        onClick={() => setActive([false])}>\r\n                        <span className={styles.closeBtn}>×</span>\r\n                    </SuperButton>\r\n                </div>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport styles from './CardsTable.module.css'\r\nimport {\r\n    CardPackType,\r\n    changeSortConfig,\r\n    changeSorting,\r\n    deleteCardPackTC,\r\n    FilteringType,\r\n    getCardPacksTC,\r\n    setNewCardPackTC,\r\n    SortConfigType,\r\n    SortingType,\r\n    updateCardPackTC\r\n} from \"./cardsTable-reduser\";\r\nimport {AppRootStateType} from \"../../../main/bll/store\";\r\nimport SuperInputText from \"../../../main/ui/common/c1-SuperInputText/SuperInputText\";\r\nimport {EMPTY_STRING} from \"../../feature1-auth/Login/login-reduser\";\r\nimport SuperButton from \"../../../main/ui/common/c2-SuperButton/SuperButton\";\r\nimport {dateChanger} from \"../../../hooks/dateChanger/dateChanger\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {Modal} from \"../../../main/ui/common/Modal/Modal\";\r\n\r\n\r\nexport function CardsTable() {\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const cardsPacks = useSelector<AppRootStateType, CardPackType[]>(state => state.cardsPacks.cardPacks)\r\n    const userId = useSelector<AppRootStateType, string>(state => state.login.userData._id)\r\n    const filteredBy = useSelector<AppRootStateType, FilteringType>(state => state.cardsPacks.filteredBy)\r\n    const sortConfig = useSelector<AppRootStateType, SortConfigType>(state => state.cardsPacks.sortConfig)\r\n    const sortedBy = useSelector<AppRootStateType, SortingType>(state => state.cardsPacks.sortedBy)\r\n\r\n    const [activeModal, setActiveModal] = useState<Array<boolean>>([false])\r\n    const modalDeleteCardPackBtnState = cardsPacks.map(() => false)\r\n    const [activeDeletePackModal, setActiveDeletePackModal] = useState<Array<boolean>>(modalDeleteCardPackBtnState)\r\n    const [activeUpdatePackModal, setActiveUpdatePackModal] = useState<Array<boolean>>(modalDeleteCardPackBtnState)\r\n    const [name, setName] = useState<string>(EMPTY_STRING)\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardPacksTC())\r\n    }, [])\r\n\r\n    const addItemHandler = () => {\r\n        dispatch(setNewCardPackTC(name))\r\n        setActiveModal([false])\r\n\r\n    }\r\n\r\n    const onClickCardPackDelete = (id: string) => {\r\n        dispatch(deleteCardPackTC(id))\r\n        setActiveDeletePackModal(modalDeleteCardPackBtnState)\r\n    }\r\n\r\n    const onClickCardPackUpdate = (id: string) => {\r\n        dispatch(updateCardPackTC(id, name))\r\n        setActiveUpdatePackModal(modalDeleteCardPackBtnState)\r\n        setName('')\r\n    }\r\n\r\n    const onLearnCardClick = (_id: string, cardPackName: string) => {\r\n        return navigate(`/cards-list/${_id}/${cardPackName}`, {replace: true})\r\n    }\r\n\r\n    //====TABLE SORT AND FILTER====\r\n    const onSortedByBtnClick = (sortedBy: SortingType) => {\r\n        if (sortConfig === 'descending') {\r\n            dispatch(changeSortConfig('ascending'))\r\n        }\r\n        if (sortConfig === 'ascending') {\r\n            dispatch(changeSortConfig('descending'))\r\n        }\r\n        dispatch(changeSorting(sortedBy))\r\n    }\r\n\r\n    let cardPacksCopy = cardsPacks\r\n\r\n    if (filteredBy === 'my') {\r\n        cardPacksCopy = cardPacksCopy.filter(pack => filteredBy === 'my' && pack.user_id === userId)\r\n    }\r\n\r\n    if (sortedBy !== null) {\r\n        cardPacksCopy.sort((a, b) => {\r\n            if (a[sortedBy] < b[sortedBy]) {\r\n                return sortConfig === 'ascending' ? -1 : 1\r\n            }\r\n            if (a[sortedBy] > b[sortedBy]) {\r\n                return sortConfig === 'ascending' ? 1 : -1\r\n            }\r\n            return 0\r\n        })\r\n    }\r\n    //====TABLE SORT AND FILTER====\r\n\r\n    const handleChangesModal = (index: number, setActive: (activeModal: Array<boolean>) => void) => {\r\n        let items = [...modalDeleteCardPackBtnState]\r\n        let item = items[index]\r\n        item = true\r\n        items[index] = item;\r\n        setActive(items)\r\n    }\r\n\r\n    let sortBtnClass = sortConfig === 'ascending' ? `${styles.btn} ${styles.ascending}` : `${styles.btn} ${styles.descending}`\r\n\r\n    return (\r\n        <div className={styles.tableContainer}>\r\n            <Modal index={0} title={'Add new pack'} active={activeModal} setActive={setActiveModal}>\r\n                <SuperInputText\r\n                    formName={error ? error : 'Name of pack'}\r\n                    type={'email'}\r\n                    onChangeText={setName}\r\n                    inputStyle\r\n                />\r\n                <div className={styles.modalBtnsWrapper}>\r\n                    <SuperButton\r\n                        classBtn={'cancelBtn'}\r\n                        onClick={() => setActiveModal([false])}>\r\n                        Cancel\r\n                    </SuperButton>\r\n                    <SuperButton\r\n                        classBtn={'confirmBtn'}\r\n                        onClick={addItemHandler}>\r\n                        Save\r\n                    </SuperButton>\r\n                </div>\r\n            </Modal>\r\n            <h2>Add a cards pack</h2>\r\n            <div className={styles.addPacksFormWrapper}>\r\n                <SuperButton\r\n                    classBtn={'confirmBtn'}\r\n                    onClick={() => setActiveModal([true])}>\r\n                    Add new pack\r\n                </SuperButton>\r\n            </div>\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <th className={styles.name}>\r\n                        <button className={sortedBy === 'name' ? sortBtnClass : styles.btn}\r\n                                onClick={() => onSortedByBtnClick('name')}>\r\n                            Pack Name\r\n                        </button>\r\n                    </th>\r\n                    <th className={styles.cardsCount}>\r\n                        <button className={sortedBy === 'cardsCount' ? sortBtnClass : styles.btn}\r\n                                onClick={() => onSortedByBtnClick('cardsCount')}>\r\n                            Cards\r\n                        </button>\r\n                    </th>\r\n                    <th className={styles.updated}>\r\n                        <button className={sortedBy === 'updated' ? sortBtnClass : styles.btn}\r\n                                onClick={() => onSortedByBtnClick('updated')}>\r\n                            Last Updated\r\n                        </button>\r\n                    </th>\r\n                    <th className={styles.user_name}>\r\n                        <button className={sortedBy === 'user_name' ? sortBtnClass : styles.btn}\r\n                                onClick={() => onSortedByBtnClick('user_name')}>\r\n                            Created by\r\n                        </button>\r\n                    </th>\r\n                    <th className={styles.actions}>Actions</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {cardPacksCopy.reverse().map((elem: CardPackType, index) => (\r\n                    <tr key={`key_${elem._id}`}>\r\n                        <td>{elem.name}</td>\r\n                        <td>{elem.cardsCount}</td>\r\n                        <td>{dateChanger(elem.updated)}</td>\r\n                        <td>{elem.user_name}</td>\r\n                        <td>\r\n                            <SuperButton\r\n                                classBtn={'updateBtn'}\r\n                                onClick={() => onLearnCardClick(elem._id, elem.name)}>\r\n                                Learn\r\n                            </SuperButton>\r\n                            {elem.user_id === userId\r\n                                ? <>\r\n                                    <SuperButton\r\n                                        classBtn={'updateBtn'}\r\n                                        onClick={() => handleChangesModal(index, setActiveUpdatePackModal)}>\r\n                                        Update\r\n                                    </SuperButton>\r\n                                    <Modal\r\n                                        index={index}\r\n                                        title={'Update Pack'}\r\n                                        active={activeUpdatePackModal}\r\n                                        setActive={setActiveUpdatePackModal}\r\n                                    >\r\n                                        <SuperInputText\r\n                                            formName={'Name of pack'}\r\n                                            type={'text'}\r\n                                            onChangeText={setName}\r\n                                            inputStyle\r\n                                        />\r\n                                        <div className={styles.modalBtnsWrapper}>\r\n                                            <SuperButton\r\n                                                classBtn={'cancelBtn'}\r\n                                                onClick={() => setActiveUpdatePackModal(modalDeleteCardPackBtnState)}>\r\n                                                Cancel\r\n                                            </SuperButton>\r\n                                            <SuperButton\r\n                                                classBtn={'confirmBtn'}\r\n                                                onClick={() => onClickCardPackUpdate(elem._id)}>\r\n                                                Send\r\n                                            </SuperButton>\r\n                                        </div>\r\n                                    </Modal>\r\n\r\n                                    <SuperButton\r\n                                        classBtn={'deleteBtn'}\r\n                                        onClick={() => handleChangesModal(index, setActiveDeletePackModal)}>\r\n                                        Delete\r\n                                    </SuperButton>\r\n                                    <Modal index={index} title={'Delete Pack'} active={activeDeletePackModal}\r\n                                           setActive={setActiveDeletePackModal}>\r\n                                        <p>Do you really want to remove <b>{elem.name} - Name Pack?</b> All cards will\r\n                                            be excluded from this course.</p>\r\n                                        <div className={styles.modalBtnsWrapper}>\r\n                                            <SuperButton\r\n                                                classBtn={'cancelBtn'}\r\n                                                onClick={() => setActiveDeletePackModal(modalDeleteCardPackBtnState)}>\r\n                                                Cancel\r\n                                            </SuperButton>\r\n                                            <SuperButton\r\n                                                classBtn={'bigDeleteBtn'}\r\n                                                onClick={() => onClickCardPackDelete(elem._id)}>\r\n                                                Delete\r\n                                            </SuperButton>\r\n                                        </div>\r\n                                    </Modal>\r\n                                </>\r\n                                : <div/>}\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}","import React, {useEffect} from 'react';\r\nimport styles from './Profile.module.css'\r\nimport {Header} from \"../../../main/ui/header/Header\";\r\nimport {CardsTable} from \"../../feature2-table/cards-table/CardsTable\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../main/bll/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nimport {authUserTC, logoutTC} from \"../Login/login-reduser\";\r\nimport SuperButton from \"../../../main/ui/common/c2-SuperButton/SuperButton\";\r\nimport {changeFiltering, FilteringType} from \"../../feature2-table/cards-table/cardsTable-reduser\";\r\nimport {path} from \"../../../main/ui/routes/Routes\";\r\n\r\n\r\nexport function Profile() {\r\n    const dispatch = useDispatch()\r\n    const authStatus = useSelector<AppRootStateType, boolean>(state => state.login.authStatus)\r\n    const filteredBy = useSelector<AppRootStateType, FilteringType>(state => state.cardsPacks.filteredBy)\r\n\r\n    useEffect(() => {\r\n        if (!authStatus) {\r\n            dispatch(authUserTC())\r\n        }\r\n    }, [])\r\n\r\n    const sendLogoutRequest = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    const onMyBtnClick = () => {\r\n        dispatch(changeFiltering('my'))\r\n    }\r\n\r\n    const onAllBtnClick = () => {\r\n        dispatch(changeFiltering('all'))\r\n    }\r\n\r\n    if (!authStatus) {\r\n        return <Navigate to={path.login}/>\r\n    } else {\r\n        return (\r\n            <>\r\n                <Header/>\r\n                <div className={styles.tableContainer}>\r\n                    <div className={styles.mainWrapper}>\r\n                        <div className={styles.leftBar}>\r\n                            <h3 className={styles.leftBarTitle}>Show packs cards</h3>\r\n                            <div className={styles.filterBtnsWrapper}>\r\n                                <SuperButton\r\n                                    classBtn={filteredBy === 'my' ? 'filterMyBtnActive' : 'filteMyBtn'}\r\n                                    onClick={onMyBtnClick}>\r\n                                    My\r\n                                </SuperButton>\r\n                                <SuperButton\r\n                                    classBtn={filteredBy === 'all' ? 'filterAllBtnActive' : 'filterAllBtn'}\r\n                                    onClick={onAllBtnClick}>\r\n                                    All\r\n                                </SuperButton>\r\n                            </div>\r\n                            <SuperButton\r\n                                classBtn={'cancelBtn'}\r\n                                onClick={() => sendLogoutRequest()}>\r\n                                Logout\r\n                            </SuperButton>\r\n                        </div>\r\n                        <div className={styles.tableWrapper}>\r\n                            Packs list\r\n                            <CardsTable/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n","import axios, {AxiosResponse} from \"axios\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n//api\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0'\r\n})\r\n\r\nexport const registerAPI = {\r\n    registerUser(email: string, password: string) {\r\n        return instance.post<AxiosResponse<string>>(`auth/register`, {email, password})\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    email: '',                       //не уверен что email и password здесь нужны\r\n    password: '',\r\n    isSignUp: false,\r\n    error: '',\r\n    infoError: ''\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const registerReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'REGISTER/SET-EMAIL-PASSWORD': {\r\n            return {...state, email: action.email, password: action.password}\r\n        }\r\n        case 'REGISTER/SET-ISSIGNUP': {\r\n            return {...state, isSignUp: action.isSignUp}\r\n        }\r\n        case 'REGISTER/SET-ERROR': {\r\n            return {...state, error: action.error, infoError: action.infoError}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setEmailPasswordRegister = (email: string, password: string) => {\r\n    return {\r\n        type: 'REGISTER/SET-EMAIL-PASSWORD',\r\n        email,\r\n        password\r\n    } as const\r\n}\r\n\r\nexport const setSingUp = (isSignUp: boolean) => {\r\n    return {\r\n        type: 'REGISTER/SET-ISSIGNUP',\r\n        isSignUp\r\n    } as const\r\n\r\n}\r\n\r\nexport const setError = (error: string, infoError: string) => {\r\n    return {\r\n        type: 'REGISTER/SET-ERROR',\r\n        error,\r\n        infoError\r\n    } as const\r\n}\r\n\r\n// thunks\r\nexport const sendRegisterDataTC = (email: string, password: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        registerAPI.registerUser(email, password)\r\n            .then((res) => {\r\n                console.log({...res})\r\n                dispatch(setEmailPasswordRegister(email, password))\r\n                dispatch(setSingUp(true))\r\n            })\r\n            .catch((e) => {\r\n                console.log({...e})\r\n                const emailPasswordError = e.response.data.error\r\n                const infoSMSError = e.response.data.passwordRegExp\r\n                dispatch(setError(emailPasswordError, infoSMSError ))\r\n                console.log(emailPasswordError)\r\n                console.log(infoSMSError)\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\ntype SetEmailRegisterType = ReturnType<typeof setEmailPasswordRegister>\r\ntype SetSingUpType = ReturnType<typeof setSingUp>\r\ntype SetErrorType = ReturnType<typeof setError>\r\n\r\n\r\ntype ActionsType = SetEmailRegisterType | SetSingUpType | SetErrorType","import React, {useState} from 'react';\r\nimport styles from './Register.module.css'\r\nimport SuperInputText from \"../../../main/ui/common/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../../main/ui/common/c2-SuperButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendRegisterDataTC} from \"./register-reduser\";\r\nimport {AppRootStateType} from \"../../../main/bll/store\";\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {path} from \"../../../main/ui/routes/Routes\";\r\n\r\n\r\nexport function Register() {\r\n    const [email, setEmail] = useState<string>('')\r\n    const [password, setPassword] = useState<string>('')\r\n    const [confirmPassword, setConfirmPassword] = useState<string>('')\r\n\r\n    const emailError = email ? '' : 'email required'\r\n    const passwordError = password ? '' : 'password required'\r\n    const confirmError = confirmPassword ? '' : 'confirm password required'\r\n\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const okSignUp = useSelector<AppRootStateType, boolean>((state) => state.register.isSignUp);\r\n    const error = useSelector<AppRootStateType, string>((state) => state.register.error)\r\n    const errorInfo = useSelector<AppRootStateType, string>((state) => state.register.infoError)\r\n\r\n    const onEnterPassword = () => {\r\n        alert('подтвердите пароль!!')\r\n    }\r\n\r\n    const sendDataHandler = () => {\r\n        if (password !== confirmPassword) {\r\n            alert('неверно введен пароль подтверждения...')\r\n        } else {\r\n            dispatch(sendRegisterDataTC(email, password))\r\n        }\r\n    }\r\n\r\n    const passwordPlace = password || confirmPassword\r\n    const disabledBtn = passwordPlace === '';\r\n\r\n    if (okSignUp) {\r\n        navigate(`${path.login}`)\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className={styles.registerWrapper}>\r\n                <div className={styles.registerWindow}>\r\n                    <h1 className={styles.logo}>It-incubator</h1>\r\n                    <h2 className={styles.signUp}>Sign Up</h2>\r\n                    <div className={styles.emailWrapper}>\r\n                        <SuperInputText\r\n                            formName={'Email'}\r\n                            type={'email'}\r\n                            value={email}\r\n                            onChangeText={setEmail}\r\n                            error={error}\r\n                            inputStyle\r\n\r\n                        />\r\n                    </div>\r\n                    <div className={styles.passwordWrapper}>\r\n                        <SuperInputText\r\n                            className={styles.password}\r\n                            formName={'Password'}\r\n                            type={'password'}\r\n                            value={password}\r\n                            onChangeText={setPassword}\r\n                            onEnter={onEnterPassword}\r\n                            error={errorInfo}\r\n                            inputStyle\r\n                        />\r\n\r\n                    </div>\r\n                    <div className={styles.passwordWrapper}>\r\n                        <SuperInputText\r\n                            className={styles.password}\r\n                            formName={'Confirm password'}\r\n                            type={'password'}\r\n                            value={confirmPassword}\r\n                            onChangeText={setConfirmPassword}\r\n                            onEnter={sendDataHandler}\r\n                            error={errorInfo}\r\n                            inputStyle\r\n                        />\r\n                    </div>\r\n                    <div className={styles.buttons}>\r\n                        <div className={styles.cancelBtn}>\r\n                            <Link to={path.login}>\r\n                                <SuperButton\r\n                                    classBtn={'cancelBtn'}>\r\n                                    Cancel\r\n                                </SuperButton>\r\n                            </Link>\r\n                        </div>\r\n                        <div className={styles.registerBtn}>\r\n                            <SuperButton\r\n                                classBtn={'confirmBtn'}\r\n                                onClick={sendDataHandler}\r\n                                disabled={disabledBtn}>\r\n                                Register\r\n                            </SuperButton>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import {AxiosResponse} from \"axios\";\r\nimport {instance} from \"./api-instance\";\r\nimport {\r\n    CardsType,\r\n    InitialCardListStateType\r\n} from \"../../features/feature2-table/cards-table/list-card/listCard-reduser\";\r\n\r\n\r\nexport const listCardApi = {\r\n    getListCard(_id: string) {\r\n        return instance.get<any, AxiosResponse<InitialCardListStateType>>(`/cards/card?cardsPack_id=${_id}&pageCount=1000`)\r\n    },\r\n    createCard(cardsPack_id: string, question: string, grade: number, answer: string) {\r\n        return instance.post<any, AxiosResponse<NewCardType>>('/cards/card', {card: {cardsPack_id, question, grade, answer}})\r\n    },\r\n    deleteCard(id: string) {\r\n        return instance.delete<any, AxiosResponse<DeletedCardType>>(`/cards/card?&id=${id}`)\r\n    },\r\n    updateCard(_id: string, question: string, answerImg: string, answer: string) {\r\n        return instance.put<any, AxiosResponse<UpdatedCardType>>(`/cards/card`, {card: {_id, question, answerImg, answer}})\r\n    }\r\n}\r\n\r\nexport type NewCardType = {\r\n    newCard: CardsType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport type DeletedCardType = {\r\n    deletedCard: CardsType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport type UpdatedCardType = {\r\n    updatedCard: CardsType\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\n","import {Dispatch} from \"react\";\r\nimport {listCardApi, NewCardType} from \"../../../../main/dal/listCard-api\";\r\nimport {changeFiltering, SortConfigType} from \"../cardsTable-reduser\";\r\n\r\n\r\nconst GET_CARDS = 'listCard/GET_CARDS'\r\nconst SET_NEW_CARD = 'listCard/SET_NEW_CARD'\r\nconst REMOVE_CARD = 'listCard/REMOVE_CARD'\r\nconst UPDATE_CARD = 'listCard/UPDATE_CARD'\r\nconst CHANGE_CARD_SORTING = 'listCard/CHANGE_CARD_SORTING'\r\nconst CHANGE_CARD_SORT_CONFIG = 'listCard/CHANGE_CARD_SORT_CONFIG'\r\nconst SET_CARD_PACK_ID = 'listCard/SET_CARD_PACK_ID'\r\n\r\nexport type CardsType = {\r\n    answer: string\r\n    answerImg: string\r\n    answerVideo: string\r\n    cardsPack_id: string\r\n    comments: string\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    question: string\r\n    questionImg: string\r\n    questionVideo: \"\"\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\nexport type InitialCardListStateType = {\r\n    cards: CardsType[]\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    packUserId: string\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport type CardsSortingType = 'question' | 'answer' | 'updated' | 'grade' | null\r\n\r\nexport type InitialStateType = {\r\n    cardList: InitialCardListStateType\r\n    cardPackId : string\r\n    cardsSortedBy: CardsSortingType\r\n    cardsSortConfig: SortConfigType\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    cardList: {\r\n        cards: [],\r\n        cardsTotalCount: 0,\r\n        maxGrade: 0,\r\n        minGrade: 0,\r\n        packUserId: '',\r\n        page: 0,\r\n        pageCount: 0,\r\n        token: '',\r\n        tokenDeathTime: 0,\r\n    },\r\n    cardPackId : '',\r\n    cardsSortedBy: null,\r\n    cardsSortConfig: 'ascending'\r\n}\r\n\r\nexport const listCardReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case GET_CARDS: {\r\n            return {\r\n                ...state,\r\n                cardList: {\r\n                    ...state.cardList,\r\n                    cards: [...action.cardListData.cards],\r\n                    cardsTotalCount: action.cardListData.cardsTotalCount,\r\n                    maxGrade: action.cardListData.maxGrade,\r\n                    minGrade: action.cardListData.minGrade,\r\n                    packUserId: action.cardListData.packUserId,\r\n                    page: action.cardListData.page,\r\n                    pageCount: action.cardListData.pageCount,\r\n                    token: action.cardListData.token,\r\n                    tokenDeathTime: action.cardListData.tokenDeathTime,\r\n                }\r\n            }\r\n        }\r\n        case SET_NEW_CARD: {\r\n            return {\r\n                ...state,\r\n                cardList: {\r\n                    ...state.cardList,\r\n                    cards: [action.newCard.newCard, ...state.cardList.cards]\r\n                }\r\n            }\r\n        }\r\n        case REMOVE_CARD: {\r\n            return {\r\n                ...state,\r\n                cardList: {\r\n                    ...state.cardList,\r\n                    cards: [...state.cardList.cards.filter(p => p._id !== action.deletedCardId)]\r\n                }\r\n            }\r\n        }\r\n        case UPDATE_CARD: {\r\n            return {\r\n                ...state,\r\n                cardList: {\r\n                    ...state.cardList, cards: [...state.cardList.cards.map(p => p._id === action.updatedCard._id\r\n                        ? action.updatedCard\r\n                        : p)]\r\n                }\r\n            }\r\n        }\r\n         case CHANGE_CARD_SORTING: {\r\n             return {...state, cardsSortedBy: action.cardsSortedBy}\r\n         }\r\n         case CHANGE_CARD_SORT_CONFIG: {\r\n             return {...state, cardsSortConfig: action.cardsSortConfig}\r\n         }\r\n         case SET_CARD_PACK_ID: {\r\n             return {...state, cardPackId: action.cardPackId}\r\n         }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const takeCardListRequest = (cardListData: InitialCardListStateType) => ({type: GET_CARDS, cardListData} as const)\r\nexport const setNewCard = (newCard: NewCardType) => ({type: SET_NEW_CARD, newCard} as const)\r\nexport const deleteCard = (deletedCardId: string) => ({type: REMOVE_CARD, deletedCardId} as const)\r\nexport const updateCard = (updatedCard: any) => ({type: UPDATE_CARD, updatedCard} as const)\r\nexport const changeCardSorting = (cardsSortedBy: CardsSortingType) => ({type: CHANGE_CARD_SORTING, cardsSortedBy} as const)\r\nexport const changeCardSortConfig = (cardsSortConfig: SortConfigType) => ({type: CHANGE_CARD_SORT_CONFIG, cardsSortConfig} as const)\r\nexport const setCardPackId = (cardPackId: string, cardPackName: string) => ({type: SET_CARD_PACK_ID, cardPackId} as const)\r\n\r\nexport const getCardListTC = (_id: string, cardPackName: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    listCardApi.getListCard(_id)\r\n        .then(res => {\r\n            dispatch(takeCardListRequest(res.data))\r\n            dispatch(setCardPackId(_id, cardPackName))\r\n        })\r\n        .catch(error => {\r\n                console.log(error)\r\n            }\r\n        )\r\n}\r\n\r\nexport const setNewCardTC = (cardsPack_id: string, question: string, grade: number, answer: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    listCardApi.createCard(cardsPack_id, question, grade, answer)\r\n        .then(res => {\r\n            dispatch(setNewCard(res.data))\r\n        })\r\n        .catch(error => {\r\n                console.log(error)\r\n            }\r\n        )\r\n}\r\n\r\nexport const deleteCardTC = (id: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    listCardApi.deleteCard(id)\r\n        .then(res => {\r\n            dispatch(deleteCard(res.data.deletedCard._id))\r\n        })\r\n        .catch(error => {\r\n                console.log(error)\r\n            }\r\n        )\r\n}\r\n\r\nexport const updateCardTC = (_id: string, question: string, answerImg: string, answer: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    listCardApi.updateCard(_id, question, answerImg, answer)\r\n        .then(res => {\r\n            dispatch(updateCard(res.data.updatedCard))\r\n        })\r\n        .catch(error => {\r\n                console.log(error)\r\n            }\r\n        )\r\n}\r\n\r\nexport type ActionsType = ReturnType<typeof takeCardListRequest>\r\n    | ReturnType<typeof setNewCard>\r\n    | ReturnType<typeof deleteCard>\r\n    | ReturnType<typeof updateCard>\r\n    | ReturnType<typeof changeFiltering>\r\n    | ReturnType<typeof changeCardSorting>\r\n    | ReturnType<typeof changeCardSortConfig>\r\n    | ReturnType<typeof setCardPackId>\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport styles from './ListCard.module.css'\r\nimport {\r\n    CardsSortingType,\r\n    CardsType,\r\n    changeCardSortConfig,\r\n    changeCardSorting,\r\n    deleteCardTC, getCardListTC,\r\n    setNewCardTC,\r\n    updateCardTC\r\n} from \"./listCard-reduser\";\r\nimport {AppRootStateType} from \"../../../../main/bll/store\";\r\nimport {EMPTY_STRING} from \"../../../feature1-auth/Login/login-reduser\";\r\nimport SuperInputText from \"../../../../main/ui/common/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../../../main/ui/common/c2-SuperButton/SuperButton\";\r\nimport {dateChanger} from \"../../../../hooks/dateChanger/dateChanger\";\r\nimport {SortConfigType} from \"../cardsTable-reduser\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport {Header} from \"../../../../main/ui/header/Header\";\r\nimport {path} from \"../../../../main/ui/routes/Routes\";\r\n\r\n\r\nexport function ListCard() {\r\n\r\n    const dispatch = useDispatch()\r\n    const cards = useSelector<AppRootStateType, CardsType[]>(state => state.cardsList.cardList.cards)\r\n    const userId = useSelector<AppRootStateType, string>(state => state.login.userData._id)\r\n    const cardPackId = useSelector<AppRootStateType, string>(state => state.cardsList.cardPackId)\r\n    const cardsSortConfig = useSelector<AppRootStateType, SortConfigType>(state => state.cardsList.cardsSortConfig)\r\n    const cardsSortedBy = useSelector<AppRootStateType, CardsSortingType>(state => state.cardsList.cardsSortedBy)\r\n\r\n    const [question, setQuestion] = useState<string>(EMPTY_STRING)\r\n    const [answer, setAnswer] = useState<string>(EMPTY_STRING)\r\n    const grade = 0\r\n\r\n    const cardPackIdURL = useParams().id\r\n    const cardPackName = useParams().name\r\n\r\n    useEffect(() => {\r\n        cardPackIdURL && cardPackName && dispatch(getCardListTC(cardPackIdURL, cardPackName))\r\n    }, [])\r\n\r\n    const addCardHandler = (cardsPack_id: string, question: string, grade: number, answer: string) => {\r\n        dispatch(setNewCardTC(cardsPack_id, question, grade, answer))\r\n        setQuestion('');\r\n        setAnswer('');\r\n    }\r\n\r\n    const onClickCardDelete = (id: string) => {\r\n        dispatch(deleteCardTC(id))\r\n    }\r\n\r\n    const onClickCardUpdate = (_id: string, question: string, answerImg: string, answer: string) => {\r\n        dispatch(updateCardTC(_id, question, answerImg, answer))\r\n    }\r\n\r\n    //====TABLE SORT AND FILTER====\r\n    const onSortedByBtnClick = (sortedBy: CardsSortingType) => {\r\n        if (cardsSortConfig === 'descending') {\r\n            dispatch(changeCardSortConfig('ascending'))\r\n        }\r\n        if (cardsSortConfig === 'ascending') {\r\n            dispatch(changeCardSortConfig('descending'))\r\n        }\r\n        dispatch(changeCardSorting(sortedBy))\r\n    }\r\n\r\n    let cardCopy = cards\r\n\r\n    if (cardsSortedBy !== null) {\r\n        cardCopy.sort((a, b) => {\r\n            if (a[cardsSortedBy] < b[cardsSortedBy]) {\r\n                return cardsSortConfig === 'ascending' ? -1 : 1\r\n            }\r\n            if (a[cardsSortedBy] > b[cardsSortedBy]) {\r\n                return cardsSortConfig === 'ascending' ? 1 : -1\r\n            }\r\n            return 0\r\n        })\r\n    }\r\n    //====TABLE SORT AND FILTER====\r\n\r\n    let sortBtnClass = cardsSortConfig === 'ascending' ? `${styles.btn} ${styles.ascending}` : `${styles.btn} ${styles.descending}`\r\n\r\n    return <>\r\n        <Header/>\r\n        <div className={styles.listCardContainer}>\r\n            <div className={styles.listCardWrapper}>\r\n                <div className={styles.tableWrapper}>\r\n                    <div className={styles.titleWrapper}>\r\n                        <Link to={path.profile}>\r\n                            <SuperButton\r\n                                classBtn={'btn'}>\r\n                                <span className={styles.back}>🠔</span>\r\n                            </SuperButton>\r\n                        </Link>\r\n                        <h2 className={styles.packName}>{cardPackName}</h2>\r\n                    </div>\r\n                    <div className={styles.addPacksFormWrapper}>\r\n                        <SuperInputText\r\n                            formName={'Question'}\r\n                            type={'text'}\r\n                            onChangeText={setQuestion}\r\n                            inputStyle\r\n                        />\r\n                        <SuperInputText\r\n                            formName={'Answer'}\r\n                            type={'text'}\r\n                            onChangeText={setAnswer}\r\n                            inputStyle\r\n                        />\r\n                        <SuperButton\r\n                            classBtn={'confirmBtn'}\r\n                            onClick={() => addCardHandler(cardPackId, question, grade, answer)}>\r\n                            Add new pack\r\n                        </SuperButton>\r\n                    </div>\r\n                    <table>\r\n                        <thead>\r\n                        <tr>\r\n                            <th className={styles.question}>\r\n                                <button className={cardsSortedBy === 'question' ? sortBtnClass : styles.btn}\r\n                                        onClick={() => onSortedByBtnClick('question')}>\r\n                                    Question\r\n                                </button>\r\n                            </th>\r\n                            <th className={styles.answer}>\r\n                                <button className={cardsSortedBy === 'answer' ? sortBtnClass : styles.btn}\r\n                                        onClick={() => onSortedByBtnClick('answer')}>\r\n                                    Answer\r\n                                </button>\r\n                            </th>\r\n                            <th className={styles.updated}>\r\n                                <button className={cardsSortedBy === 'updated' ? sortBtnClass : styles.btn}\r\n                                        onClick={() => onSortedByBtnClick('updated')}>\r\n                                    Updated\r\n                                </button>\r\n                            </th>\r\n                            <th className={styles.grade}>\r\n                                <button className={cardsSortedBy === 'grade' ? sortBtnClass : styles.btn}\r\n                                        onClick={() => onSortedByBtnClick('grade')}>\r\n                                    Grade\r\n                                </button>\r\n                            </th>\r\n                            <th className={styles.actions}>Actions</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {cardCopy.reverse().map((elem: CardsType) => (\r\n                            <tr key={`key_${elem._id}`}>\r\n                                <td>{elem.question}</td>\r\n                                <td>{elem.answer}</td>\r\n                                <td>{dateChanger(elem.updated)}</td>\r\n                                <td>{elem.grade}</td>\r\n                                <td>\r\n                                    {elem.user_id === userId\r\n                                        ? <>\r\n                                            <SuperButton\r\n                                                classBtn={'updateBtn'}\r\n                                                onClick={() => onClickCardUpdate(elem._id, 'Updated Question', 'https://images.app.goo.gl/2zDenkuNsWMajrZ66', 'Updated Answer')}>\r\n                                                Update\r\n                                            </SuperButton>\r\n                                            <SuperButton\r\n                                                classBtn={'deleteBtn'}\r\n                                                onClick={() => onClickCardDelete(elem._id)}>\r\n                                                Delete\r\n                                            </SuperButton>\r\n                                        </>\r\n                                        : <div/>}\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </>\r\n}","import React from 'react';\r\nimport {Route, Routes} from \"react-router-dom\";\r\nimport {Error404} from \"../../../features/feature1-auth/Error404/Error404\";\r\nimport {Login} from '../../../features/feature1-auth/Login/Login';\r\nimport {NewPassword} from \"../../../features/feature1-auth/Password-recovery/new-password/NewPassword\";\r\nimport {PasswordRecovery} from \"../../../features/feature1-auth/Password-recovery/PasswordRecovery\";\r\nimport {CheckEmail} from \"../../../features/feature1-auth/Password-recovery/check-email/CheckEmail\";\r\nimport {Profile} from \"../../../features/feature1-auth/Profile/Profile\";\r\nimport {Register} from \"../../../features/feature1-auth/Register/Register\";\r\nimport {ListCard} from \"../../../features/feature2-table/cards-table/list-card/ListCard\";\r\n\r\n\r\nexport const path = {\r\n    login: '/login',\r\n    newPassword: '/new-password/:token',\r\n    passwordRecovery: '/password-recovery',\r\n    checkEmail: '/check-email',\r\n    profile: '/profile',\r\n    register: '/register',\r\n    error: '/error404',\r\n    cardsList: '/cards-list/:id/:name',\r\n}\r\n\r\nexport function Rout() {\r\n    return (\r\n        <div className='routes'>\r\n            <Routes>\r\n                <Route path='/' element={<Login/>}/>\r\n                <Route path={path.login} element={<Login/>}/>\r\n                <Route path={path.newPassword} element={<NewPassword/>}/>\r\n                <Route path={path.passwordRecovery} element={<PasswordRecovery/>}/>\r\n                <Route path={path.checkEmail} element={<CheckEmail/>}/>\r\n                <Route path={path.profile} element={<Profile/>}/>\r\n                <Route path={path.register} element={<Register/>}/>\r\n                <Route path={path.error} element={<Error404/>}/>\r\n                <Route path={path.cardsList} element={<ListCard/>}/>\r\n                <Route path={'*'} element={<Error404/>}/>\r\n            </Routes>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Rout} from \"./routes/Routes\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Rout/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const initialState = {}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    return state\r\n}\r\n\r\n// thunks\r\n\r\n// types\r\ntype ActionsType = any","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {loginReducer} from \"../../features/feature1-auth/Login/login-reduser\";\r\nimport {registerReducer} from \"../../features/feature1-auth/Register/register-reduser\";\r\nimport {passwordRecoveryReducer} from \"../../features/feature1-auth/Password-recovery/password-recovery-reduser\";\r\nimport {profileReducer} from \"../../features/feature1-auth/Profile/profile-reduser\";\r\nimport {cardsTableReducer} from \"../../features/feature2-table/cards-table/cardsTable-reduser\";\r\nimport {listCardReducer} from \"../../features/feature2-table/cards-table/list-card/listCard-reduser\";\r\n\r\nconst rootReducer = combineReducers({\r\n    login:loginReducer,\r\n    register: registerReducer,\r\n    passwordRecovery: passwordRecoveryReducer,\r\n    profile: profileReducer,\r\n    cardsPacks: cardsTableReducer,\r\n    cardsList: listCardReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './main/ui/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter, } from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./main/bll/store\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableContainer\":\"CardsTable_tableContainer__1DQWJ\",\"modalBtnsWrapper\":\"CardsTable_modalBtnsWrapper__1jQHs\",\"addPacksFormWrapper\":\"CardsTable_addPacksFormWrapper__3n9s_\",\"cardsCount\":\"CardsTable_cardsCount__2Xeyj\",\"updated\":\"CardsTable_updated__ZS1hV\",\"actions\":\"CardsTable_actions__1nORH\",\"btn\":\"CardsTable_btn__1Gxne\",\"ascending\":\"CardsTable_ascending__3s9zP\",\"descending\":\"CardsTable_descending__ty3Bo\"};"],"sourceRoot":""}